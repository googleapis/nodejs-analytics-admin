// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import * as gax from 'google-gax';
import {Callback, CallOptions, Descriptors, ClientOptions, PaginationCallback, GaxCall} from 'google-gax';

import { Transform } from 'stream';
import { RequestType } from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1alpha/analytics_admin_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './analytics_admin_service_client_config.json';

const version = require('../../../package.json').version;

/**
 *  Service Interface for the Analytics Admin API (GA4).
 * @class
 * @memberof v1alpha
 */
export class AnalyticsAdminServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  analyticsAdminServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of AnalyticsAdminServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP fallback mode.
   *     In fallback mode, a special browser-compatible transport implementation is used
   *     instead of gRPC transport. In browser context (if the `window` object is defined)
   *     the fallback mode is enabled automatically; set `options.fallback` to `false`
   *     if you need to override this behavior.
   */
  constructor(opts?: ClientOptions) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof AnalyticsAdminServiceClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest' ) {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      accountPathTemplate: new this._gaxModule.PathTemplate(
        'accounts/{account}'
      ),
      accountSummaryPathTemplate: new this._gaxModule.PathTemplate(
        'accountSummaries/{account_summary}'
      ),
      accountUserLinkPathTemplate: new this._gaxModule.PathTemplate(
        'accounts/{account}/userLinks/{user_link}'
      ),
      androidAppDataStreamPathTemplate: new this._gaxModule.PathTemplate(
        'properties/{property}/androidAppDataStreams/{android_app_data_stream}'
      ),
      dataSharingSettingsPathTemplate: new this._gaxModule.PathTemplate(
        'accounts/{account}/dataSharingSettings'
      ),
      enhancedMeasurementSettingsPathTemplate: new this._gaxModule.PathTemplate(
        'properties/{property}/webDataStreams/{web_data_stream}/enhancedMeasurementSettings'
      ),
      firebaseLinkPathTemplate: new this._gaxModule.PathTemplate(
        'properties/{property}/firebaseLinks/{firebase_link}'
      ),
      globalSiteTagPathTemplate: new this._gaxModule.PathTemplate(
        'properties/{property}/globalSiteTag'
      ),
      googleAdsLinkPathTemplate: new this._gaxModule.PathTemplate(
        'properties/{property}/googleAdsLinks/{google_ads_link}'
      ),
      iosAppDataStreamPathTemplate: new this._gaxModule.PathTemplate(
        'properties/{property}/iosAppDataStreams/{ios_app_data_stream}'
      ),
      propertyPathTemplate: new this._gaxModule.PathTemplate(
        'properties/{property}'
      ),
      propertyUserLinkPathTemplate: new this._gaxModule.PathTemplate(
        'properties/{property}/userLinks/{user_link}'
      ),
      webDataStreamPathTemplate: new this._gaxModule.PathTemplate(
        'properties/{property}/webDataStreams/{web_data_stream}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listAccounts:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'accounts'),
      listAccountSummaries:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'accountSummaries'),
      listProperties:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'properties'),
      listUserLinks:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'userLinks'),
      auditUserLinks:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'userLinks'),
      listWebDataStreams:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'webDataStreams'),
      listIosAppDataStreams:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'iosAppDataStreams'),
      listAndroidAppDataStreams:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'androidAppDataStreams'),
      listFirebaseLinks:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'firebaseLinks'),
      listGoogleAdsLinks:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'googleAdsLinks'),
      searchChangeHistoryEvents:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'changeHistoryEvents')
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.analytics.admin.v1alpha.AnalyticsAdminService', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.analyticsAdminServiceStub) {
      return this.analyticsAdminServiceStub;
    }

    // Put together the "service stub" for
    // google.analytics.admin.v1alpha.AnalyticsAdminService.
    this.analyticsAdminServiceStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.analytics.admin.v1alpha.AnalyticsAdminService') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.analytics.admin.v1alpha.AnalyticsAdminService,
        this._opts) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const analyticsAdminServiceStubMethods =
        ['getAccount', 'listAccounts', 'deleteAccount', 'updateAccount', 'provisionAccountTicket', 'listAccountSummaries', 'getProperty', 'listProperties', 'createProperty', 'deleteProperty', 'updateProperty', 'getUserLink', 'batchGetUserLinks', 'listUserLinks', 'auditUserLinks', 'createUserLink', 'batchCreateUserLinks', 'updateUserLink', 'batchUpdateUserLinks', 'deleteUserLink', 'batchDeleteUserLinks', 'getWebDataStream', 'deleteWebDataStream', 'updateWebDataStream', 'createWebDataStream', 'listWebDataStreams', 'getIosAppDataStream', 'deleteIosAppDataStream', 'updateIosAppDataStream', 'listIosAppDataStreams', 'getAndroidAppDataStream', 'deleteAndroidAppDataStream', 'updateAndroidAppDataStream', 'listAndroidAppDataStreams', 'getEnhancedMeasurementSettings', 'updateEnhancedMeasurementSettings', 'createFirebaseLink', 'updateFirebaseLink', 'deleteFirebaseLink', 'listFirebaseLinks', 'getGlobalSiteTag', 'createGoogleAdsLink', 'updateGoogleAdsLink', 'deleteGoogleAdsLink', 'listGoogleAdsLinks', 'getDataSharingSettings', 'searchChangeHistoryEvents'];
    for (const methodName of analyticsAdminServiceStubMethods) {
      const callPromise = this.analyticsAdminServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.analyticsAdminServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'analyticsadmin.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'analyticsadmin.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/analytics.edit',
      'https://www.googleapis.com/auth/analytics.manage.users',
      'https://www.googleapis.com/auth/analytics.manage.users.readonly',
      'https://www.googleapis.com/auth/analytics.readonly'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  getAccount(
      request: protos.google.analytics.admin.v1alpha.IGetAccountRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IAccount,
        protos.google.analytics.admin.v1alpha.IGetAccountRequest|undefined, {}|undefined
      ]>;
  getAccount(
      request: protos.google.analytics.admin.v1alpha.IGetAccountRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IAccount,
          protos.google.analytics.admin.v1alpha.IGetAccountRequest|null|undefined,
          {}|null|undefined>): void;
  getAccount(
      request: protos.google.analytics.admin.v1alpha.IGetAccountRequest,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IAccount,
          protos.google.analytics.admin.v1alpha.IGetAccountRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Lookup for a single Account.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the account to lookup.
 *   Format: accounts/{account}
 *   Example: "accounts/100"
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Account]{@link google.analytics.admin.v1alpha.Account}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getAccount(request);
 */
  getAccount(
      request: protos.google.analytics.admin.v1alpha.IGetAccountRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.analytics.admin.v1alpha.IAccount,
          protos.google.analytics.admin.v1alpha.IGetAccountRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.analytics.admin.v1alpha.IAccount,
          protos.google.analytics.admin.v1alpha.IGetAccountRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IAccount,
        protos.google.analytics.admin.v1alpha.IGetAccountRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getAccount(request, options, callback);
  }
  deleteAccount(
      request: protos.google.analytics.admin.v1alpha.IDeleteAccountRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.analytics.admin.v1alpha.IDeleteAccountRequest|undefined, {}|undefined
      ]>;
  deleteAccount(
      request: protos.google.analytics.admin.v1alpha.IDeleteAccountRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.analytics.admin.v1alpha.IDeleteAccountRequest|null|undefined,
          {}|null|undefined>): void;
  deleteAccount(
      request: protos.google.analytics.admin.v1alpha.IDeleteAccountRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.analytics.admin.v1alpha.IDeleteAccountRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Marks target Account as soft-deleted (ie: "trashed") and returns it.
 *
 * This API does not have a method to restore soft-deleted accounts.
 * However, they can be restored using the Trash Can UI.
 *
 * If the accounts are not restored before the expiration time, the account
 * and all child resources (eg: Properties, GoogleAdsLinks, Streams,
 * UserLinks) will be permanently purged.
 * https://support.google.com/analytics/answer/6154772
 *
 * Returns an error if the target is not found.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the Account to soft-delete.
 *   Format: accounts/{account}
 *   Example: "accounts/100"
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.deleteAccount(request);
 */
  deleteAccount(
      request: protos.google.analytics.admin.v1alpha.IDeleteAccountRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.analytics.admin.v1alpha.IDeleteAccountRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.analytics.admin.v1alpha.IDeleteAccountRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.analytics.admin.v1alpha.IDeleteAccountRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteAccount(request, options, callback);
  }
  updateAccount(
      request: protos.google.analytics.admin.v1alpha.IUpdateAccountRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IAccount,
        protos.google.analytics.admin.v1alpha.IUpdateAccountRequest|undefined, {}|undefined
      ]>;
  updateAccount(
      request: protos.google.analytics.admin.v1alpha.IUpdateAccountRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IAccount,
          protos.google.analytics.admin.v1alpha.IUpdateAccountRequest|null|undefined,
          {}|null|undefined>): void;
  updateAccount(
      request: protos.google.analytics.admin.v1alpha.IUpdateAccountRequest,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IAccount,
          protos.google.analytics.admin.v1alpha.IUpdateAccountRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates an account.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.analytics.admin.v1alpha.Account} request.account
 *   Required. The account to update.
 *   The account's `name` field is used to identify the account.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. The list of fields to be updated. Field names must be in snake case
 *   (e.g., "field_to_update"). Omitted fields will not be updated. To replace
 *   the entire entity, use one path with the string "*" to match all fields.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Account]{@link google.analytics.admin.v1alpha.Account}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.updateAccount(request);
 */
  updateAccount(
      request: protos.google.analytics.admin.v1alpha.IUpdateAccountRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.analytics.admin.v1alpha.IAccount,
          protos.google.analytics.admin.v1alpha.IUpdateAccountRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.analytics.admin.v1alpha.IAccount,
          protos.google.analytics.admin.v1alpha.IUpdateAccountRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IAccount,
        protos.google.analytics.admin.v1alpha.IUpdateAccountRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'account.name': request.account!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateAccount(request, options, callback);
  }
  provisionAccountTicket(
      request: protos.google.analytics.admin.v1alpha.IProvisionAccountTicketRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IProvisionAccountTicketResponse,
        protos.google.analytics.admin.v1alpha.IProvisionAccountTicketRequest|undefined, {}|undefined
      ]>;
  provisionAccountTicket(
      request: protos.google.analytics.admin.v1alpha.IProvisionAccountTicketRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IProvisionAccountTicketResponse,
          protos.google.analytics.admin.v1alpha.IProvisionAccountTicketRequest|null|undefined,
          {}|null|undefined>): void;
  provisionAccountTicket(
      request: protos.google.analytics.admin.v1alpha.IProvisionAccountTicketRequest,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IProvisionAccountTicketResponse,
          protos.google.analytics.admin.v1alpha.IProvisionAccountTicketRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Requests a ticket for creating an account.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.analytics.admin.v1alpha.Account} request.account
 *   The account to create.
 * @param {string} request.redirectUri
 *   Redirect URI where the user will be sent after accepting Terms of Service.
 *   Must be configured in Developers Console as a Redirect URI
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ProvisionAccountTicketResponse]{@link google.analytics.admin.v1alpha.ProvisionAccountTicketResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.provisionAccountTicket(request);
 */
  provisionAccountTicket(
      request: protos.google.analytics.admin.v1alpha.IProvisionAccountTicketRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.analytics.admin.v1alpha.IProvisionAccountTicketResponse,
          protos.google.analytics.admin.v1alpha.IProvisionAccountTicketRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.analytics.admin.v1alpha.IProvisionAccountTicketResponse,
          protos.google.analytics.admin.v1alpha.IProvisionAccountTicketRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IProvisionAccountTicketResponse,
        protos.google.analytics.admin.v1alpha.IProvisionAccountTicketRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.provisionAccountTicket(request, options, callback);
  }
  getProperty(
      request: protos.google.analytics.admin.v1alpha.IGetPropertyRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IProperty,
        protos.google.analytics.admin.v1alpha.IGetPropertyRequest|undefined, {}|undefined
      ]>;
  getProperty(
      request: protos.google.analytics.admin.v1alpha.IGetPropertyRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IProperty,
          protos.google.analytics.admin.v1alpha.IGetPropertyRequest|null|undefined,
          {}|null|undefined>): void;
  getProperty(
      request: protos.google.analytics.admin.v1alpha.IGetPropertyRequest,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IProperty,
          protos.google.analytics.admin.v1alpha.IGetPropertyRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Lookup for a single "GA4" Property.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the property to lookup.
 *   Format: properties/{property_id}
 *   Example: "properties/1000"
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Property]{@link google.analytics.admin.v1alpha.Property}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getProperty(request);
 */
  getProperty(
      request: protos.google.analytics.admin.v1alpha.IGetPropertyRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.analytics.admin.v1alpha.IProperty,
          protos.google.analytics.admin.v1alpha.IGetPropertyRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.analytics.admin.v1alpha.IProperty,
          protos.google.analytics.admin.v1alpha.IGetPropertyRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IProperty,
        protos.google.analytics.admin.v1alpha.IGetPropertyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getProperty(request, options, callback);
  }
  createProperty(
      request: protos.google.analytics.admin.v1alpha.ICreatePropertyRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IProperty,
        protos.google.analytics.admin.v1alpha.ICreatePropertyRequest|undefined, {}|undefined
      ]>;
  createProperty(
      request: protos.google.analytics.admin.v1alpha.ICreatePropertyRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IProperty,
          protos.google.analytics.admin.v1alpha.ICreatePropertyRequest|null|undefined,
          {}|null|undefined>): void;
  createProperty(
      request: protos.google.analytics.admin.v1alpha.ICreatePropertyRequest,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IProperty,
          protos.google.analytics.admin.v1alpha.ICreatePropertyRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Creates an "GA4" property with the specified location and attributes.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.analytics.admin.v1alpha.Property} request.property
 *   Required. The property to create.
 *   Note: the supplied property must specify its parent.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Property]{@link google.analytics.admin.v1alpha.Property}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.createProperty(request);
 */
  createProperty(
      request: protos.google.analytics.admin.v1alpha.ICreatePropertyRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.analytics.admin.v1alpha.IProperty,
          protos.google.analytics.admin.v1alpha.ICreatePropertyRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.analytics.admin.v1alpha.IProperty,
          protos.google.analytics.admin.v1alpha.ICreatePropertyRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IProperty,
        protos.google.analytics.admin.v1alpha.ICreatePropertyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.createProperty(request, options, callback);
  }
  deleteProperty(
      request: protos.google.analytics.admin.v1alpha.IDeletePropertyRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IProperty,
        protos.google.analytics.admin.v1alpha.IDeletePropertyRequest|undefined, {}|undefined
      ]>;
  deleteProperty(
      request: protos.google.analytics.admin.v1alpha.IDeletePropertyRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IProperty,
          protos.google.analytics.admin.v1alpha.IDeletePropertyRequest|null|undefined,
          {}|null|undefined>): void;
  deleteProperty(
      request: protos.google.analytics.admin.v1alpha.IDeletePropertyRequest,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IProperty,
          protos.google.analytics.admin.v1alpha.IDeletePropertyRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Marks target Property as soft-deleted (ie: "trashed") and returns it.
 *
 * This API does not have a method to restore soft-deleted properties.
 * However, they can be restored using the Trash Can UI.
 *
 * If the properties are not restored before the expiration time, the Property
 * and all child resources (eg: GoogleAdsLinks, Streams, UserLinks)
 * will be permanently purged.
 * https://support.google.com/analytics/answer/6154772
 *
 * Returns an error if the target is not found, or is not an GA4 Property.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the Property to soft-delete.
 *   Format: properties/{property_id}
 *   Example: "properties/1000"
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Property]{@link google.analytics.admin.v1alpha.Property}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.deleteProperty(request);
 */
  deleteProperty(
      request: protos.google.analytics.admin.v1alpha.IDeletePropertyRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.analytics.admin.v1alpha.IProperty,
          protos.google.analytics.admin.v1alpha.IDeletePropertyRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.analytics.admin.v1alpha.IProperty,
          protos.google.analytics.admin.v1alpha.IDeletePropertyRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IProperty,
        protos.google.analytics.admin.v1alpha.IDeletePropertyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteProperty(request, options, callback);
  }
  updateProperty(
      request: protos.google.analytics.admin.v1alpha.IUpdatePropertyRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IProperty,
        protos.google.analytics.admin.v1alpha.IUpdatePropertyRequest|undefined, {}|undefined
      ]>;
  updateProperty(
      request: protos.google.analytics.admin.v1alpha.IUpdatePropertyRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IProperty,
          protos.google.analytics.admin.v1alpha.IUpdatePropertyRequest|null|undefined,
          {}|null|undefined>): void;
  updateProperty(
      request: protos.google.analytics.admin.v1alpha.IUpdatePropertyRequest,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IProperty,
          protos.google.analytics.admin.v1alpha.IUpdatePropertyRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates a property.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.analytics.admin.v1alpha.Property} request.property
 *   Required. The property to update.
 *   The property's `name` field is used to identify the property to be
 *   updated.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. The list of fields to be updated. Field names must be in snake case
 *   (e.g., "field_to_update"). Omitted fields will not be updated. To replace
 *   the entire entity, use one path with the string "*" to match all fields.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Property]{@link google.analytics.admin.v1alpha.Property}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.updateProperty(request);
 */
  updateProperty(
      request: protos.google.analytics.admin.v1alpha.IUpdatePropertyRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.analytics.admin.v1alpha.IProperty,
          protos.google.analytics.admin.v1alpha.IUpdatePropertyRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.analytics.admin.v1alpha.IProperty,
          protos.google.analytics.admin.v1alpha.IUpdatePropertyRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IProperty,
        protos.google.analytics.admin.v1alpha.IUpdatePropertyRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'property.name': request.property!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateProperty(request, options, callback);
  }
  getUserLink(
      request: protos.google.analytics.admin.v1alpha.IGetUserLinkRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IUserLink,
        protos.google.analytics.admin.v1alpha.IGetUserLinkRequest|undefined, {}|undefined
      ]>;
  getUserLink(
      request: protos.google.analytics.admin.v1alpha.IGetUserLinkRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IUserLink,
          protos.google.analytics.admin.v1alpha.IGetUserLinkRequest|null|undefined,
          {}|null|undefined>): void;
  getUserLink(
      request: protos.google.analytics.admin.v1alpha.IGetUserLinkRequest,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IUserLink,
          protos.google.analytics.admin.v1alpha.IGetUserLinkRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Gets information about a user's link to an account or property.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Example format: accounts/1234/userLinks/5678
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [UserLink]{@link google.analytics.admin.v1alpha.UserLink}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getUserLink(request);
 */
  getUserLink(
      request: protos.google.analytics.admin.v1alpha.IGetUserLinkRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.analytics.admin.v1alpha.IUserLink,
          protos.google.analytics.admin.v1alpha.IGetUserLinkRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.analytics.admin.v1alpha.IUserLink,
          protos.google.analytics.admin.v1alpha.IGetUserLinkRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IUserLink,
        protos.google.analytics.admin.v1alpha.IGetUserLinkRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getUserLink(request, options, callback);
  }
  batchGetUserLinks(
      request: protos.google.analytics.admin.v1alpha.IBatchGetUserLinksRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IBatchGetUserLinksResponse,
        protos.google.analytics.admin.v1alpha.IBatchGetUserLinksRequest|undefined, {}|undefined
      ]>;
  batchGetUserLinks(
      request: protos.google.analytics.admin.v1alpha.IBatchGetUserLinksRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IBatchGetUserLinksResponse,
          protos.google.analytics.admin.v1alpha.IBatchGetUserLinksRequest|null|undefined,
          {}|null|undefined>): void;
  batchGetUserLinks(
      request: protos.google.analytics.admin.v1alpha.IBatchGetUserLinksRequest,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IBatchGetUserLinksResponse,
          protos.google.analytics.admin.v1alpha.IBatchGetUserLinksRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Gets information about multiple users' links to an account or property.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The account or property that all user links in the request are
 *   for. The parent of all provided values for the 'names' field must match
 *   this field.
 *   Example format: accounts/1234
 * @param {string[]} request.names
 *   Required. The names of the user links to retrieve.
 *   A maximum of 1000 user links can be retrieved in a batch.
 *   Format: accounts/{accountId}/userLinks/{userLinkId}
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [BatchGetUserLinksResponse]{@link google.analytics.admin.v1alpha.BatchGetUserLinksResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.batchGetUserLinks(request);
 */
  batchGetUserLinks(
      request: protos.google.analytics.admin.v1alpha.IBatchGetUserLinksRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.analytics.admin.v1alpha.IBatchGetUserLinksResponse,
          protos.google.analytics.admin.v1alpha.IBatchGetUserLinksRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.analytics.admin.v1alpha.IBatchGetUserLinksResponse,
          protos.google.analytics.admin.v1alpha.IBatchGetUserLinksRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IBatchGetUserLinksResponse,
        protos.google.analytics.admin.v1alpha.IBatchGetUserLinksRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.batchGetUserLinks(request, options, callback);
  }
  createUserLink(
      request: protos.google.analytics.admin.v1alpha.ICreateUserLinkRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IUserLink,
        protos.google.analytics.admin.v1alpha.ICreateUserLinkRequest|undefined, {}|undefined
      ]>;
  createUserLink(
      request: protos.google.analytics.admin.v1alpha.ICreateUserLinkRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IUserLink,
          protos.google.analytics.admin.v1alpha.ICreateUserLinkRequest|null|undefined,
          {}|null|undefined>): void;
  createUserLink(
      request: protos.google.analytics.admin.v1alpha.ICreateUserLinkRequest,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IUserLink,
          protos.google.analytics.admin.v1alpha.ICreateUserLinkRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Creates a user link on an account or property.
 *
 * If the user with the specified email already has permissions on the
 * account or property, then the user's existing permissions will be unioned
 * with the permissions specified in the new UserLink.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Example format: accounts/1234
 * @param {boolean} [request.notifyNewUser]
 *   Optional. If set, then email the new user notifying them that they've been granted
 *   permissions to the resource.
 * @param {google.analytics.admin.v1alpha.UserLink} request.userLink
 *   Required. The user link to create.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [UserLink]{@link google.analytics.admin.v1alpha.UserLink}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.createUserLink(request);
 */
  createUserLink(
      request: protos.google.analytics.admin.v1alpha.ICreateUserLinkRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.analytics.admin.v1alpha.IUserLink,
          protos.google.analytics.admin.v1alpha.ICreateUserLinkRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.analytics.admin.v1alpha.IUserLink,
          protos.google.analytics.admin.v1alpha.ICreateUserLinkRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IUserLink,
        protos.google.analytics.admin.v1alpha.ICreateUserLinkRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createUserLink(request, options, callback);
  }
  batchCreateUserLinks(
      request: protos.google.analytics.admin.v1alpha.IBatchCreateUserLinksRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IBatchCreateUserLinksResponse,
        protos.google.analytics.admin.v1alpha.IBatchCreateUserLinksRequest|undefined, {}|undefined
      ]>;
  batchCreateUserLinks(
      request: protos.google.analytics.admin.v1alpha.IBatchCreateUserLinksRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IBatchCreateUserLinksResponse,
          protos.google.analytics.admin.v1alpha.IBatchCreateUserLinksRequest|null|undefined,
          {}|null|undefined>): void;
  batchCreateUserLinks(
      request: protos.google.analytics.admin.v1alpha.IBatchCreateUserLinksRequest,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IBatchCreateUserLinksResponse,
          protos.google.analytics.admin.v1alpha.IBatchCreateUserLinksRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Creates information about multiple users' links to an account or property.
 *
 * This method is transactional. If any UserLink cannot be created, none of
 * the UserLinks will be created.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The account or property that all user links in the request are for.
 *   This field is required. The parent field in the CreateUserLinkRequest
 *   messages must either be empty or match this field.
 *   Example format: accounts/1234
 * @param {boolean} [request.notifyNewUsers]
 *   Optional. If set, then email the new users notifying them that they've been granted
 *   permissions to the resource. Regardless of whether this is set or not,
 *   notify_new_user field inside each individual request is ignored.
 * @param {number[]} request.requests
 *   Required. The requests specifying the user links to create.
 *   A maximum of 1000 user links can be created in a batch.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [BatchCreateUserLinksResponse]{@link google.analytics.admin.v1alpha.BatchCreateUserLinksResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.batchCreateUserLinks(request);
 */
  batchCreateUserLinks(
      request: protos.google.analytics.admin.v1alpha.IBatchCreateUserLinksRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.analytics.admin.v1alpha.IBatchCreateUserLinksResponse,
          protos.google.analytics.admin.v1alpha.IBatchCreateUserLinksRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.analytics.admin.v1alpha.IBatchCreateUserLinksResponse,
          protos.google.analytics.admin.v1alpha.IBatchCreateUserLinksRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IBatchCreateUserLinksResponse,
        protos.google.analytics.admin.v1alpha.IBatchCreateUserLinksRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.batchCreateUserLinks(request, options, callback);
  }
  updateUserLink(
      request: protos.google.analytics.admin.v1alpha.IUpdateUserLinkRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IUserLink,
        protos.google.analytics.admin.v1alpha.IUpdateUserLinkRequest|undefined, {}|undefined
      ]>;
  updateUserLink(
      request: protos.google.analytics.admin.v1alpha.IUpdateUserLinkRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IUserLink,
          protos.google.analytics.admin.v1alpha.IUpdateUserLinkRequest|null|undefined,
          {}|null|undefined>): void;
  updateUserLink(
      request: protos.google.analytics.admin.v1alpha.IUpdateUserLinkRequest,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IUserLink,
          protos.google.analytics.admin.v1alpha.IUpdateUserLinkRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates a user link on an account or property.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.analytics.admin.v1alpha.UserLink} request.userLink
 *   Required. The user link to update.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [UserLink]{@link google.analytics.admin.v1alpha.UserLink}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.updateUserLink(request);
 */
  updateUserLink(
      request: protos.google.analytics.admin.v1alpha.IUpdateUserLinkRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.analytics.admin.v1alpha.IUserLink,
          protos.google.analytics.admin.v1alpha.IUpdateUserLinkRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.analytics.admin.v1alpha.IUserLink,
          protos.google.analytics.admin.v1alpha.IUpdateUserLinkRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IUserLink,
        protos.google.analytics.admin.v1alpha.IUpdateUserLinkRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'user_link.name': request.userLink!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateUserLink(request, options, callback);
  }
  batchUpdateUserLinks(
      request: protos.google.analytics.admin.v1alpha.IBatchUpdateUserLinksRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IBatchUpdateUserLinksResponse,
        protos.google.analytics.admin.v1alpha.IBatchUpdateUserLinksRequest|undefined, {}|undefined
      ]>;
  batchUpdateUserLinks(
      request: protos.google.analytics.admin.v1alpha.IBatchUpdateUserLinksRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IBatchUpdateUserLinksResponse,
          protos.google.analytics.admin.v1alpha.IBatchUpdateUserLinksRequest|null|undefined,
          {}|null|undefined>): void;
  batchUpdateUserLinks(
      request: protos.google.analytics.admin.v1alpha.IBatchUpdateUserLinksRequest,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IBatchUpdateUserLinksResponse,
          protos.google.analytics.admin.v1alpha.IBatchUpdateUserLinksRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates information about multiple users' links to an account or property.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The account or property that all user links in the request are
 *   for. The parent field in the UpdateUserLinkRequest messages must either be
 *   empty or match this field.
 *   Example format: accounts/1234
 * @param {number[]} request.requests
 *   Required. The requests specifying the user links to update.
 *   A maximum of 1000 user links can be updated in a batch.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [BatchUpdateUserLinksResponse]{@link google.analytics.admin.v1alpha.BatchUpdateUserLinksResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.batchUpdateUserLinks(request);
 */
  batchUpdateUserLinks(
      request: protos.google.analytics.admin.v1alpha.IBatchUpdateUserLinksRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.analytics.admin.v1alpha.IBatchUpdateUserLinksResponse,
          protos.google.analytics.admin.v1alpha.IBatchUpdateUserLinksRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.analytics.admin.v1alpha.IBatchUpdateUserLinksResponse,
          protos.google.analytics.admin.v1alpha.IBatchUpdateUserLinksRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IBatchUpdateUserLinksResponse,
        protos.google.analytics.admin.v1alpha.IBatchUpdateUserLinksRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.batchUpdateUserLinks(request, options, callback);
  }
  deleteUserLink(
      request: protos.google.analytics.admin.v1alpha.IDeleteUserLinkRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.analytics.admin.v1alpha.IDeleteUserLinkRequest|undefined, {}|undefined
      ]>;
  deleteUserLink(
      request: protos.google.analytics.admin.v1alpha.IDeleteUserLinkRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.analytics.admin.v1alpha.IDeleteUserLinkRequest|null|undefined,
          {}|null|undefined>): void;
  deleteUserLink(
      request: protos.google.analytics.admin.v1alpha.IDeleteUserLinkRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.analytics.admin.v1alpha.IDeleteUserLinkRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Deletes a user link on an account or property.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Example format: accounts/1234/userLinks/5678
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.deleteUserLink(request);
 */
  deleteUserLink(
      request: protos.google.analytics.admin.v1alpha.IDeleteUserLinkRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.analytics.admin.v1alpha.IDeleteUserLinkRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.analytics.admin.v1alpha.IDeleteUserLinkRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.analytics.admin.v1alpha.IDeleteUserLinkRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteUserLink(request, options, callback);
  }
  batchDeleteUserLinks(
      request: protos.google.analytics.admin.v1alpha.IBatchDeleteUserLinksRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.analytics.admin.v1alpha.IBatchDeleteUserLinksRequest|undefined, {}|undefined
      ]>;
  batchDeleteUserLinks(
      request: protos.google.analytics.admin.v1alpha.IBatchDeleteUserLinksRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.analytics.admin.v1alpha.IBatchDeleteUserLinksRequest|null|undefined,
          {}|null|undefined>): void;
  batchDeleteUserLinks(
      request: protos.google.analytics.admin.v1alpha.IBatchDeleteUserLinksRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.analytics.admin.v1alpha.IBatchDeleteUserLinksRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Deletes information about multiple users' links to an account or property.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The account or property that all user links in the request are
 *   for. The parent of all values for user link names to delete must match this
 *   field.
 *   Example format: accounts/1234
 * @param {number[]} request.requests
 *   Required. The requests specifying the user links to update.
 *   A maximum of 1000 user links can be updated in a batch.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.batchDeleteUserLinks(request);
 */
  batchDeleteUserLinks(
      request: protos.google.analytics.admin.v1alpha.IBatchDeleteUserLinksRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.analytics.admin.v1alpha.IBatchDeleteUserLinksRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.analytics.admin.v1alpha.IBatchDeleteUserLinksRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.analytics.admin.v1alpha.IBatchDeleteUserLinksRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.batchDeleteUserLinks(request, options, callback);
  }
  getWebDataStream(
      request: protos.google.analytics.admin.v1alpha.IGetWebDataStreamRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IWebDataStream,
        protos.google.analytics.admin.v1alpha.IGetWebDataStreamRequest|undefined, {}|undefined
      ]>;
  getWebDataStream(
      request: protos.google.analytics.admin.v1alpha.IGetWebDataStreamRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IWebDataStream,
          protos.google.analytics.admin.v1alpha.IGetWebDataStreamRequest|null|undefined,
          {}|null|undefined>): void;
  getWebDataStream(
      request: protos.google.analytics.admin.v1alpha.IGetWebDataStreamRequest,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IWebDataStream,
          protos.google.analytics.admin.v1alpha.IGetWebDataStreamRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Lookup for a single WebDataStream
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the web data stream to lookup.
 *   Format: properties/{property_id}/webDataStreams/{stream_id}
 *   Example: "properties/123/webDataStreams/456"
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [WebDataStream]{@link google.analytics.admin.v1alpha.WebDataStream}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getWebDataStream(request);
 */
  getWebDataStream(
      request: protos.google.analytics.admin.v1alpha.IGetWebDataStreamRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.analytics.admin.v1alpha.IWebDataStream,
          protos.google.analytics.admin.v1alpha.IGetWebDataStreamRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.analytics.admin.v1alpha.IWebDataStream,
          protos.google.analytics.admin.v1alpha.IGetWebDataStreamRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IWebDataStream,
        protos.google.analytics.admin.v1alpha.IGetWebDataStreamRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getWebDataStream(request, options, callback);
  }
  deleteWebDataStream(
      request: protos.google.analytics.admin.v1alpha.IDeleteWebDataStreamRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.analytics.admin.v1alpha.IDeleteWebDataStreamRequest|undefined, {}|undefined
      ]>;
  deleteWebDataStream(
      request: protos.google.analytics.admin.v1alpha.IDeleteWebDataStreamRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.analytics.admin.v1alpha.IDeleteWebDataStreamRequest|null|undefined,
          {}|null|undefined>): void;
  deleteWebDataStream(
      request: protos.google.analytics.admin.v1alpha.IDeleteWebDataStreamRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.analytics.admin.v1alpha.IDeleteWebDataStreamRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Deletes a web stream on a property.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the web data stream to delete.
 *   Format: properties/{property_id}/webDataStreams/{stream_id}
 *   Example: "properties/123/webDataStreams/456"
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.deleteWebDataStream(request);
 */
  deleteWebDataStream(
      request: protos.google.analytics.admin.v1alpha.IDeleteWebDataStreamRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.analytics.admin.v1alpha.IDeleteWebDataStreamRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.analytics.admin.v1alpha.IDeleteWebDataStreamRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.analytics.admin.v1alpha.IDeleteWebDataStreamRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteWebDataStream(request, options, callback);
  }
  updateWebDataStream(
      request: protos.google.analytics.admin.v1alpha.IUpdateWebDataStreamRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IWebDataStream,
        protos.google.analytics.admin.v1alpha.IUpdateWebDataStreamRequest|undefined, {}|undefined
      ]>;
  updateWebDataStream(
      request: protos.google.analytics.admin.v1alpha.IUpdateWebDataStreamRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IWebDataStream,
          protos.google.analytics.admin.v1alpha.IUpdateWebDataStreamRequest|null|undefined,
          {}|null|undefined>): void;
  updateWebDataStream(
      request: protos.google.analytics.admin.v1alpha.IUpdateWebDataStreamRequest,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IWebDataStream,
          protos.google.analytics.admin.v1alpha.IUpdateWebDataStreamRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates a web stream on a property.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.analytics.admin.v1alpha.WebDataStream} request.webDataStream
 *   Required. The web stream to update.
 *   The `name` field is used to identify the web stream to be updated.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. The list of fields to be updated. Field names must be in snake case
 *   (e.g., "field_to_update"). Omitted fields will not be updated. To replace
 *   the entire entity, use one path with the string "*" to match all fields.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [WebDataStream]{@link google.analytics.admin.v1alpha.WebDataStream}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.updateWebDataStream(request);
 */
  updateWebDataStream(
      request: protos.google.analytics.admin.v1alpha.IUpdateWebDataStreamRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.analytics.admin.v1alpha.IWebDataStream,
          protos.google.analytics.admin.v1alpha.IUpdateWebDataStreamRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.analytics.admin.v1alpha.IWebDataStream,
          protos.google.analytics.admin.v1alpha.IUpdateWebDataStreamRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IWebDataStream,
        protos.google.analytics.admin.v1alpha.IUpdateWebDataStreamRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'web_data_stream.name': request.webDataStream!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateWebDataStream(request, options, callback);
  }
  createWebDataStream(
      request: protos.google.analytics.admin.v1alpha.ICreateWebDataStreamRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IWebDataStream,
        protos.google.analytics.admin.v1alpha.ICreateWebDataStreamRequest|undefined, {}|undefined
      ]>;
  createWebDataStream(
      request: protos.google.analytics.admin.v1alpha.ICreateWebDataStreamRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IWebDataStream,
          protos.google.analytics.admin.v1alpha.ICreateWebDataStreamRequest|null|undefined,
          {}|null|undefined>): void;
  createWebDataStream(
      request: protos.google.analytics.admin.v1alpha.ICreateWebDataStreamRequest,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IWebDataStream,
          protos.google.analytics.admin.v1alpha.ICreateWebDataStreamRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Creates a web stream with the specified location and attributes.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.analytics.admin.v1alpha.WebDataStream} request.webDataStream
 *   Required. The web stream to create.
 * @param {string} request.parent
 *   Required. The parent resource where this web data stream will be created.
 *   Format: properties/123
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [WebDataStream]{@link google.analytics.admin.v1alpha.WebDataStream}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.createWebDataStream(request);
 */
  createWebDataStream(
      request: protos.google.analytics.admin.v1alpha.ICreateWebDataStreamRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.analytics.admin.v1alpha.IWebDataStream,
          protos.google.analytics.admin.v1alpha.ICreateWebDataStreamRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.analytics.admin.v1alpha.IWebDataStream,
          protos.google.analytics.admin.v1alpha.ICreateWebDataStreamRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IWebDataStream,
        protos.google.analytics.admin.v1alpha.ICreateWebDataStreamRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createWebDataStream(request, options, callback);
  }
  getIosAppDataStream(
      request: protos.google.analytics.admin.v1alpha.IGetIosAppDataStreamRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IIosAppDataStream,
        protos.google.analytics.admin.v1alpha.IGetIosAppDataStreamRequest|undefined, {}|undefined
      ]>;
  getIosAppDataStream(
      request: protos.google.analytics.admin.v1alpha.IGetIosAppDataStreamRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IIosAppDataStream,
          protos.google.analytics.admin.v1alpha.IGetIosAppDataStreamRequest|null|undefined,
          {}|null|undefined>): void;
  getIosAppDataStream(
      request: protos.google.analytics.admin.v1alpha.IGetIosAppDataStreamRequest,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IIosAppDataStream,
          protos.google.analytics.admin.v1alpha.IGetIosAppDataStreamRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Lookup for a single IosAppDataStream
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the iOS app data stream to lookup.
 *   Format: properties/{property_id}/iosAppDataStreams/{stream_id}
 *   Example: "properties/123/iosAppDataStreams/456"
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [IosAppDataStream]{@link google.analytics.admin.v1alpha.IosAppDataStream}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getIosAppDataStream(request);
 */
  getIosAppDataStream(
      request: protos.google.analytics.admin.v1alpha.IGetIosAppDataStreamRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.analytics.admin.v1alpha.IIosAppDataStream,
          protos.google.analytics.admin.v1alpha.IGetIosAppDataStreamRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.analytics.admin.v1alpha.IIosAppDataStream,
          protos.google.analytics.admin.v1alpha.IGetIosAppDataStreamRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IIosAppDataStream,
        protos.google.analytics.admin.v1alpha.IGetIosAppDataStreamRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getIosAppDataStream(request, options, callback);
  }
  deleteIosAppDataStream(
      request: protos.google.analytics.admin.v1alpha.IDeleteIosAppDataStreamRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.analytics.admin.v1alpha.IDeleteIosAppDataStreamRequest|undefined, {}|undefined
      ]>;
  deleteIosAppDataStream(
      request: protos.google.analytics.admin.v1alpha.IDeleteIosAppDataStreamRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.analytics.admin.v1alpha.IDeleteIosAppDataStreamRequest|null|undefined,
          {}|null|undefined>): void;
  deleteIosAppDataStream(
      request: protos.google.analytics.admin.v1alpha.IDeleteIosAppDataStreamRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.analytics.admin.v1alpha.IDeleteIosAppDataStreamRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Deletes an iOS app stream on a property.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the iOS app data stream to delete.
 *   Format: properties/{property_id}/iosAppDataStreams/{stream_id}
 *   Example: "properties/123/iosAppDataStreams/456"
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.deleteIosAppDataStream(request);
 */
  deleteIosAppDataStream(
      request: protos.google.analytics.admin.v1alpha.IDeleteIosAppDataStreamRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.analytics.admin.v1alpha.IDeleteIosAppDataStreamRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.analytics.admin.v1alpha.IDeleteIosAppDataStreamRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.analytics.admin.v1alpha.IDeleteIosAppDataStreamRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteIosAppDataStream(request, options, callback);
  }
  updateIosAppDataStream(
      request: protos.google.analytics.admin.v1alpha.IUpdateIosAppDataStreamRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IIosAppDataStream,
        protos.google.analytics.admin.v1alpha.IUpdateIosAppDataStreamRequest|undefined, {}|undefined
      ]>;
  updateIosAppDataStream(
      request: protos.google.analytics.admin.v1alpha.IUpdateIosAppDataStreamRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IIosAppDataStream,
          protos.google.analytics.admin.v1alpha.IUpdateIosAppDataStreamRequest|null|undefined,
          {}|null|undefined>): void;
  updateIosAppDataStream(
      request: protos.google.analytics.admin.v1alpha.IUpdateIosAppDataStreamRequest,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IIosAppDataStream,
          protos.google.analytics.admin.v1alpha.IUpdateIosAppDataStreamRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates an iOS app stream on a property.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.analytics.admin.v1alpha.IosAppDataStream} request.iosAppDataStream
 *   Required. The iOS app stream to update.
 *   The `name` field is used to identify the iOS app stream to be updated.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. The list of fields to be updated. Field names must be in snake case
 *   (e.g., "field_to_update"). Omitted fields will not be updated. To replace
 *   the entire entity, use one path with the string "*" to match all fields.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [IosAppDataStream]{@link google.analytics.admin.v1alpha.IosAppDataStream}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.updateIosAppDataStream(request);
 */
  updateIosAppDataStream(
      request: protos.google.analytics.admin.v1alpha.IUpdateIosAppDataStreamRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.analytics.admin.v1alpha.IIosAppDataStream,
          protos.google.analytics.admin.v1alpha.IUpdateIosAppDataStreamRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.analytics.admin.v1alpha.IIosAppDataStream,
          protos.google.analytics.admin.v1alpha.IUpdateIosAppDataStreamRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IIosAppDataStream,
        protos.google.analytics.admin.v1alpha.IUpdateIosAppDataStreamRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'ios_app_data_stream.name': request.iosAppDataStream!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateIosAppDataStream(request, options, callback);
  }
  getAndroidAppDataStream(
      request: protos.google.analytics.admin.v1alpha.IGetAndroidAppDataStreamRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IAndroidAppDataStream,
        protos.google.analytics.admin.v1alpha.IGetAndroidAppDataStreamRequest|undefined, {}|undefined
      ]>;
  getAndroidAppDataStream(
      request: protos.google.analytics.admin.v1alpha.IGetAndroidAppDataStreamRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IAndroidAppDataStream,
          protos.google.analytics.admin.v1alpha.IGetAndroidAppDataStreamRequest|null|undefined,
          {}|null|undefined>): void;
  getAndroidAppDataStream(
      request: protos.google.analytics.admin.v1alpha.IGetAndroidAppDataStreamRequest,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IAndroidAppDataStream,
          protos.google.analytics.admin.v1alpha.IGetAndroidAppDataStreamRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Lookup for a single AndroidAppDataStream
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the android app data stream to lookup.
 *   Format: properties/{property_id}/androidAppDataStreams/{stream_id}
 *   Example: "properties/123/androidAppDataStreams/456"
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [AndroidAppDataStream]{@link google.analytics.admin.v1alpha.AndroidAppDataStream}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getAndroidAppDataStream(request);
 */
  getAndroidAppDataStream(
      request: protos.google.analytics.admin.v1alpha.IGetAndroidAppDataStreamRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.analytics.admin.v1alpha.IAndroidAppDataStream,
          protos.google.analytics.admin.v1alpha.IGetAndroidAppDataStreamRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.analytics.admin.v1alpha.IAndroidAppDataStream,
          protos.google.analytics.admin.v1alpha.IGetAndroidAppDataStreamRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IAndroidAppDataStream,
        protos.google.analytics.admin.v1alpha.IGetAndroidAppDataStreamRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getAndroidAppDataStream(request, options, callback);
  }
  deleteAndroidAppDataStream(
      request: protos.google.analytics.admin.v1alpha.IDeleteAndroidAppDataStreamRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.analytics.admin.v1alpha.IDeleteAndroidAppDataStreamRequest|undefined, {}|undefined
      ]>;
  deleteAndroidAppDataStream(
      request: protos.google.analytics.admin.v1alpha.IDeleteAndroidAppDataStreamRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.analytics.admin.v1alpha.IDeleteAndroidAppDataStreamRequest|null|undefined,
          {}|null|undefined>): void;
  deleteAndroidAppDataStream(
      request: protos.google.analytics.admin.v1alpha.IDeleteAndroidAppDataStreamRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.analytics.admin.v1alpha.IDeleteAndroidAppDataStreamRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Deletes an android app stream on a property.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the android app data stream to delete.
 *   Format: properties/{property_id}/androidAppDataStreams/{stream_id}
 *   Example: "properties/123/androidAppDataStreams/456"
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.deleteAndroidAppDataStream(request);
 */
  deleteAndroidAppDataStream(
      request: protos.google.analytics.admin.v1alpha.IDeleteAndroidAppDataStreamRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.analytics.admin.v1alpha.IDeleteAndroidAppDataStreamRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.analytics.admin.v1alpha.IDeleteAndroidAppDataStreamRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.analytics.admin.v1alpha.IDeleteAndroidAppDataStreamRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteAndroidAppDataStream(request, options, callback);
  }
  updateAndroidAppDataStream(
      request: protos.google.analytics.admin.v1alpha.IUpdateAndroidAppDataStreamRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IAndroidAppDataStream,
        protos.google.analytics.admin.v1alpha.IUpdateAndroidAppDataStreamRequest|undefined, {}|undefined
      ]>;
  updateAndroidAppDataStream(
      request: protos.google.analytics.admin.v1alpha.IUpdateAndroidAppDataStreamRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IAndroidAppDataStream,
          protos.google.analytics.admin.v1alpha.IUpdateAndroidAppDataStreamRequest|null|undefined,
          {}|null|undefined>): void;
  updateAndroidAppDataStream(
      request: protos.google.analytics.admin.v1alpha.IUpdateAndroidAppDataStreamRequest,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IAndroidAppDataStream,
          protos.google.analytics.admin.v1alpha.IUpdateAndroidAppDataStreamRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates an android app stream on a property.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.analytics.admin.v1alpha.AndroidAppDataStream} request.androidAppDataStream
 *   Required. The android app stream to update.
 *   The `name` field is used to identify the android app stream to be updated.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. The list of fields to be updated. Field names must be in snake case
 *   (e.g., "field_to_update"). Omitted fields will not be updated. To replace
 *   the entire entity, use one path with the string "*" to match all fields.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [AndroidAppDataStream]{@link google.analytics.admin.v1alpha.AndroidAppDataStream}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.updateAndroidAppDataStream(request);
 */
  updateAndroidAppDataStream(
      request: protos.google.analytics.admin.v1alpha.IUpdateAndroidAppDataStreamRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.analytics.admin.v1alpha.IAndroidAppDataStream,
          protos.google.analytics.admin.v1alpha.IUpdateAndroidAppDataStreamRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.analytics.admin.v1alpha.IAndroidAppDataStream,
          protos.google.analytics.admin.v1alpha.IUpdateAndroidAppDataStreamRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IAndroidAppDataStream,
        protos.google.analytics.admin.v1alpha.IUpdateAndroidAppDataStreamRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'android_app_data_stream.name': request.androidAppDataStream!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateAndroidAppDataStream(request, options, callback);
  }
  getEnhancedMeasurementSettings(
      request: protos.google.analytics.admin.v1alpha.IGetEnhancedMeasurementSettingsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IEnhancedMeasurementSettings,
        protos.google.analytics.admin.v1alpha.IGetEnhancedMeasurementSettingsRequest|undefined, {}|undefined
      ]>;
  getEnhancedMeasurementSettings(
      request: protos.google.analytics.admin.v1alpha.IGetEnhancedMeasurementSettingsRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IEnhancedMeasurementSettings,
          protos.google.analytics.admin.v1alpha.IGetEnhancedMeasurementSettingsRequest|null|undefined,
          {}|null|undefined>): void;
  getEnhancedMeasurementSettings(
      request: protos.google.analytics.admin.v1alpha.IGetEnhancedMeasurementSettingsRequest,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IEnhancedMeasurementSettings,
          protos.google.analytics.admin.v1alpha.IGetEnhancedMeasurementSettingsRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Returns the singleton enhanced measurement settings for this web stream.
 * Note that the stream must enable enhanced measurement for these settings to
 * take effect.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the settings to lookup.
 *   Format:
 *   properties/{property_id}/webDataStreams/{stream_id}/enhancedMeasurementSettings
 *   Example: "properties/1000/webDataStreams/2000/enhancedMeasurementSettings"
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [EnhancedMeasurementSettings]{@link google.analytics.admin.v1alpha.EnhancedMeasurementSettings}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getEnhancedMeasurementSettings(request);
 */
  getEnhancedMeasurementSettings(
      request: protos.google.analytics.admin.v1alpha.IGetEnhancedMeasurementSettingsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.analytics.admin.v1alpha.IEnhancedMeasurementSettings,
          protos.google.analytics.admin.v1alpha.IGetEnhancedMeasurementSettingsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.analytics.admin.v1alpha.IEnhancedMeasurementSettings,
          protos.google.analytics.admin.v1alpha.IGetEnhancedMeasurementSettingsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IEnhancedMeasurementSettings,
        protos.google.analytics.admin.v1alpha.IGetEnhancedMeasurementSettingsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getEnhancedMeasurementSettings(request, options, callback);
  }
  updateEnhancedMeasurementSettings(
      request: protos.google.analytics.admin.v1alpha.IUpdateEnhancedMeasurementSettingsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IEnhancedMeasurementSettings,
        protos.google.analytics.admin.v1alpha.IUpdateEnhancedMeasurementSettingsRequest|undefined, {}|undefined
      ]>;
  updateEnhancedMeasurementSettings(
      request: protos.google.analytics.admin.v1alpha.IUpdateEnhancedMeasurementSettingsRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IEnhancedMeasurementSettings,
          protos.google.analytics.admin.v1alpha.IUpdateEnhancedMeasurementSettingsRequest|null|undefined,
          {}|null|undefined>): void;
  updateEnhancedMeasurementSettings(
      request: protos.google.analytics.admin.v1alpha.IUpdateEnhancedMeasurementSettingsRequest,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IEnhancedMeasurementSettings,
          protos.google.analytics.admin.v1alpha.IUpdateEnhancedMeasurementSettingsRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates the singleton enhanced measurement settings for this web stream.
 * Note that the stream must enable enhanced measurement for these settings to
 * take effect.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.analytics.admin.v1alpha.EnhancedMeasurementSettings} request.enhancedMeasurementSettings
 *   Required. The settings to update.
 *   The `name` field is used to identify the settings to be updated.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. The list of fields to be updated. Field names must be in snake case
 *   (e.g., "field_to_update"). Omitted fields will not be updated. To replace
 *   the entire entity, use one path with the string "*" to match all fields.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [EnhancedMeasurementSettings]{@link google.analytics.admin.v1alpha.EnhancedMeasurementSettings}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.updateEnhancedMeasurementSettings(request);
 */
  updateEnhancedMeasurementSettings(
      request: protos.google.analytics.admin.v1alpha.IUpdateEnhancedMeasurementSettingsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.analytics.admin.v1alpha.IEnhancedMeasurementSettings,
          protos.google.analytics.admin.v1alpha.IUpdateEnhancedMeasurementSettingsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.analytics.admin.v1alpha.IEnhancedMeasurementSettings,
          protos.google.analytics.admin.v1alpha.IUpdateEnhancedMeasurementSettingsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IEnhancedMeasurementSettings,
        protos.google.analytics.admin.v1alpha.IUpdateEnhancedMeasurementSettingsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'enhanced_measurement_settings.name': request.enhancedMeasurementSettings!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateEnhancedMeasurementSettings(request, options, callback);
  }
  createFirebaseLink(
      request: protos.google.analytics.admin.v1alpha.ICreateFirebaseLinkRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IFirebaseLink,
        protos.google.analytics.admin.v1alpha.ICreateFirebaseLinkRequest|undefined, {}|undefined
      ]>;
  createFirebaseLink(
      request: protos.google.analytics.admin.v1alpha.ICreateFirebaseLinkRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IFirebaseLink,
          protos.google.analytics.admin.v1alpha.ICreateFirebaseLinkRequest|null|undefined,
          {}|null|undefined>): void;
  createFirebaseLink(
      request: protos.google.analytics.admin.v1alpha.ICreateFirebaseLinkRequest,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IFirebaseLink,
          protos.google.analytics.admin.v1alpha.ICreateFirebaseLinkRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Creates a FirebaseLink.
 *
 * Properties can have at most one FirebaseLink.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Format: properties/{property_id}
 *   Example: properties/1234
 * @param {google.analytics.admin.v1alpha.FirebaseLink} request.firebaseLink
 *   Required. The Firebase link to create.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [FirebaseLink]{@link google.analytics.admin.v1alpha.FirebaseLink}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.createFirebaseLink(request);
 */
  createFirebaseLink(
      request: protos.google.analytics.admin.v1alpha.ICreateFirebaseLinkRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.analytics.admin.v1alpha.IFirebaseLink,
          protos.google.analytics.admin.v1alpha.ICreateFirebaseLinkRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.analytics.admin.v1alpha.IFirebaseLink,
          protos.google.analytics.admin.v1alpha.ICreateFirebaseLinkRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IFirebaseLink,
        protos.google.analytics.admin.v1alpha.ICreateFirebaseLinkRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createFirebaseLink(request, options, callback);
  }
  updateFirebaseLink(
      request: protos.google.analytics.admin.v1alpha.IUpdateFirebaseLinkRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IFirebaseLink,
        protos.google.analytics.admin.v1alpha.IUpdateFirebaseLinkRequest|undefined, {}|undefined
      ]>;
  updateFirebaseLink(
      request: protos.google.analytics.admin.v1alpha.IUpdateFirebaseLinkRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IFirebaseLink,
          protos.google.analytics.admin.v1alpha.IUpdateFirebaseLinkRequest|null|undefined,
          {}|null|undefined>): void;
  updateFirebaseLink(
      request: protos.google.analytics.admin.v1alpha.IUpdateFirebaseLinkRequest,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IFirebaseLink,
          protos.google.analytics.admin.v1alpha.IUpdateFirebaseLinkRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates a FirebaseLink on a property
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.analytics.admin.v1alpha.FirebaseLink} request.firebaseLink
 *   Required. The Firebase link to update.
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. The list of fields to be updated. Field names must be in snake case
 *   (e.g., "field_to_update"). Omitted fields will not be updated. To replace
 *   the entire entity, use one path with the string "*" to match all fields.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [FirebaseLink]{@link google.analytics.admin.v1alpha.FirebaseLink}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.updateFirebaseLink(request);
 */
  updateFirebaseLink(
      request: protos.google.analytics.admin.v1alpha.IUpdateFirebaseLinkRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.analytics.admin.v1alpha.IFirebaseLink,
          protos.google.analytics.admin.v1alpha.IUpdateFirebaseLinkRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.analytics.admin.v1alpha.IFirebaseLink,
          protos.google.analytics.admin.v1alpha.IUpdateFirebaseLinkRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IFirebaseLink,
        protos.google.analytics.admin.v1alpha.IUpdateFirebaseLinkRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'firebase_link.name': request.firebaseLink!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateFirebaseLink(request, options, callback);
  }
  deleteFirebaseLink(
      request: protos.google.analytics.admin.v1alpha.IDeleteFirebaseLinkRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.analytics.admin.v1alpha.IDeleteFirebaseLinkRequest|undefined, {}|undefined
      ]>;
  deleteFirebaseLink(
      request: protos.google.analytics.admin.v1alpha.IDeleteFirebaseLinkRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.analytics.admin.v1alpha.IDeleteFirebaseLinkRequest|null|undefined,
          {}|null|undefined>): void;
  deleteFirebaseLink(
      request: protos.google.analytics.admin.v1alpha.IDeleteFirebaseLinkRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.analytics.admin.v1alpha.IDeleteFirebaseLinkRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Deletes a FirebaseLink on a property
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Format: properties/{property_id}/firebaseLinks/{firebase_link_id}
 *   Example: properties/1234/firebaseLinks/5678
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.deleteFirebaseLink(request);
 */
  deleteFirebaseLink(
      request: protos.google.analytics.admin.v1alpha.IDeleteFirebaseLinkRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.analytics.admin.v1alpha.IDeleteFirebaseLinkRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.analytics.admin.v1alpha.IDeleteFirebaseLinkRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.analytics.admin.v1alpha.IDeleteFirebaseLinkRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteFirebaseLink(request, options, callback);
  }
  getGlobalSiteTag(
      request: protos.google.analytics.admin.v1alpha.IGetGlobalSiteTagRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IGlobalSiteTag,
        protos.google.analytics.admin.v1alpha.IGetGlobalSiteTagRequest|undefined, {}|undefined
      ]>;
  getGlobalSiteTag(
      request: protos.google.analytics.admin.v1alpha.IGetGlobalSiteTagRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IGlobalSiteTag,
          protos.google.analytics.admin.v1alpha.IGetGlobalSiteTagRequest|null|undefined,
          {}|null|undefined>): void;
  getGlobalSiteTag(
      request: protos.google.analytics.admin.v1alpha.IGetGlobalSiteTagRequest,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IGlobalSiteTag,
          protos.google.analytics.admin.v1alpha.IGetGlobalSiteTagRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Returns the Site Tag for the specified web stream.
 * Site Tags are immutable singletons.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the site tag to lookup.
 *   Note that site tags are singletons and do not have unique IDs.
 *   Format: properties/{property_id}/webDataStreams/{stream_id}/globalSiteTag
 *   Example: "properties/123/webDataStreams/456/globalSiteTag"
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [GlobalSiteTag]{@link google.analytics.admin.v1alpha.GlobalSiteTag}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getGlobalSiteTag(request);
 */
  getGlobalSiteTag(
      request: protos.google.analytics.admin.v1alpha.IGetGlobalSiteTagRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.analytics.admin.v1alpha.IGlobalSiteTag,
          protos.google.analytics.admin.v1alpha.IGetGlobalSiteTagRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.analytics.admin.v1alpha.IGlobalSiteTag,
          protos.google.analytics.admin.v1alpha.IGetGlobalSiteTagRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IGlobalSiteTag,
        protos.google.analytics.admin.v1alpha.IGetGlobalSiteTagRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getGlobalSiteTag(request, options, callback);
  }
  createGoogleAdsLink(
      request: protos.google.analytics.admin.v1alpha.ICreateGoogleAdsLinkRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IGoogleAdsLink,
        protos.google.analytics.admin.v1alpha.ICreateGoogleAdsLinkRequest|undefined, {}|undefined
      ]>;
  createGoogleAdsLink(
      request: protos.google.analytics.admin.v1alpha.ICreateGoogleAdsLinkRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IGoogleAdsLink,
          protos.google.analytics.admin.v1alpha.ICreateGoogleAdsLinkRequest|null|undefined,
          {}|null|undefined>): void;
  createGoogleAdsLink(
      request: protos.google.analytics.admin.v1alpha.ICreateGoogleAdsLinkRequest,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IGoogleAdsLink,
          protos.google.analytics.admin.v1alpha.ICreateGoogleAdsLinkRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Creates a GoogleAdsLink.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Example format: properties/1234
 * @param {google.analytics.admin.v1alpha.GoogleAdsLink} request.googleAdsLink
 *   Required. The GoogleAdsLink to create.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [GoogleAdsLink]{@link google.analytics.admin.v1alpha.GoogleAdsLink}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.createGoogleAdsLink(request);
 */
  createGoogleAdsLink(
      request: protos.google.analytics.admin.v1alpha.ICreateGoogleAdsLinkRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.analytics.admin.v1alpha.IGoogleAdsLink,
          protos.google.analytics.admin.v1alpha.ICreateGoogleAdsLinkRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.analytics.admin.v1alpha.IGoogleAdsLink,
          protos.google.analytics.admin.v1alpha.ICreateGoogleAdsLinkRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IGoogleAdsLink,
        protos.google.analytics.admin.v1alpha.ICreateGoogleAdsLinkRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createGoogleAdsLink(request, options, callback);
  }
  updateGoogleAdsLink(
      request: protos.google.analytics.admin.v1alpha.IUpdateGoogleAdsLinkRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IGoogleAdsLink,
        protos.google.analytics.admin.v1alpha.IUpdateGoogleAdsLinkRequest|undefined, {}|undefined
      ]>;
  updateGoogleAdsLink(
      request: protos.google.analytics.admin.v1alpha.IUpdateGoogleAdsLinkRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IGoogleAdsLink,
          protos.google.analytics.admin.v1alpha.IUpdateGoogleAdsLinkRequest|null|undefined,
          {}|null|undefined>): void;
  updateGoogleAdsLink(
      request: protos.google.analytics.admin.v1alpha.IUpdateGoogleAdsLinkRequest,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IGoogleAdsLink,
          protos.google.analytics.admin.v1alpha.IUpdateGoogleAdsLinkRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates a GoogleAdsLink on a property
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.analytics.admin.v1alpha.GoogleAdsLink} request.googleAdsLink
 *   The GoogleAdsLink to update
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. The list of fields to be updated. Field names must be in snake case
 *   (e.g., "field_to_update"). Omitted fields will not be updated. To replace
 *   the entire entity, use one path with the string "*" to match all fields.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [GoogleAdsLink]{@link google.analytics.admin.v1alpha.GoogleAdsLink}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.updateGoogleAdsLink(request);
 */
  updateGoogleAdsLink(
      request: protos.google.analytics.admin.v1alpha.IUpdateGoogleAdsLinkRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.analytics.admin.v1alpha.IGoogleAdsLink,
          protos.google.analytics.admin.v1alpha.IUpdateGoogleAdsLinkRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.analytics.admin.v1alpha.IGoogleAdsLink,
          protos.google.analytics.admin.v1alpha.IUpdateGoogleAdsLinkRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IGoogleAdsLink,
        protos.google.analytics.admin.v1alpha.IUpdateGoogleAdsLinkRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'google_ads_link.name': request.googleAdsLink!.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateGoogleAdsLink(request, options, callback);
  }
  deleteGoogleAdsLink(
      request: protos.google.analytics.admin.v1alpha.IDeleteGoogleAdsLinkRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.analytics.admin.v1alpha.IDeleteGoogleAdsLinkRequest|undefined, {}|undefined
      ]>;
  deleteGoogleAdsLink(
      request: protos.google.analytics.admin.v1alpha.IDeleteGoogleAdsLinkRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.analytics.admin.v1alpha.IDeleteGoogleAdsLinkRequest|null|undefined,
          {}|null|undefined>): void;
  deleteGoogleAdsLink(
      request: protos.google.analytics.admin.v1alpha.IDeleteGoogleAdsLinkRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.analytics.admin.v1alpha.IDeleteGoogleAdsLinkRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Deletes a GoogleAdsLink on a property
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. Example format: properties/1234/googleAdsLinks/5678
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.deleteGoogleAdsLink(request);
 */
  deleteGoogleAdsLink(
      request: protos.google.analytics.admin.v1alpha.IDeleteGoogleAdsLinkRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.analytics.admin.v1alpha.IDeleteGoogleAdsLinkRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.analytics.admin.v1alpha.IDeleteGoogleAdsLinkRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.analytics.admin.v1alpha.IDeleteGoogleAdsLinkRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteGoogleAdsLink(request, options, callback);
  }
  getDataSharingSettings(
      request: protos.google.analytics.admin.v1alpha.IGetDataSharingSettingsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IDataSharingSettings,
        protos.google.analytics.admin.v1alpha.IGetDataSharingSettingsRequest|undefined, {}|undefined
      ]>;
  getDataSharingSettings(
      request: protos.google.analytics.admin.v1alpha.IGetDataSharingSettingsRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IDataSharingSettings,
          protos.google.analytics.admin.v1alpha.IGetDataSharingSettingsRequest|null|undefined,
          {}|null|undefined>): void;
  getDataSharingSettings(
      request: protos.google.analytics.admin.v1alpha.IGetDataSharingSettingsRequest,
      callback: Callback<
          protos.google.analytics.admin.v1alpha.IDataSharingSettings,
          protos.google.analytics.admin.v1alpha.IGetDataSharingSettingsRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Get data sharing settings on an account.
 * Data sharing settings are singletons.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The name of the settings to lookup.
 *   Format: accounts/{account}/dataSharingSettings
 *   Example: "accounts/1000/dataSharingSettings"
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [DataSharingSettings]{@link google.analytics.admin.v1alpha.DataSharingSettings}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getDataSharingSettings(request);
 */
  getDataSharingSettings(
      request: protos.google.analytics.admin.v1alpha.IGetDataSharingSettingsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.analytics.admin.v1alpha.IDataSharingSettings,
          protos.google.analytics.admin.v1alpha.IGetDataSharingSettingsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.analytics.admin.v1alpha.IDataSharingSettings,
          protos.google.analytics.admin.v1alpha.IGetDataSharingSettingsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IDataSharingSettings,
        protos.google.analytics.admin.v1alpha.IGetDataSharingSettingsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getDataSharingSettings(request, options, callback);
  }

  listAccounts(
      request: protos.google.analytics.admin.v1alpha.IListAccountsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IAccount[],
        protos.google.analytics.admin.v1alpha.IListAccountsRequest|null,
        protos.google.analytics.admin.v1alpha.IListAccountsResponse
      ]>;
  listAccounts(
      request: protos.google.analytics.admin.v1alpha.IListAccountsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListAccountsRequest,
          protos.google.analytics.admin.v1alpha.IListAccountsResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IAccount>): void;
  listAccounts(
      request: protos.google.analytics.admin.v1alpha.IListAccountsRequest,
      callback: PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListAccountsRequest,
          protos.google.analytics.admin.v1alpha.IListAccountsResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IAccount>): void;
/**
 * Returns all accounts accessible by the caller.
 *
 * Note that these accounts might not currently have GA4 properties.
 * Soft-deleted (ie: "trashed") accounts are excluded by default.
 * Returns an empty list if no relevant accounts are found.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   The maximum number of resources to return. The service may return
 *   fewer than this value, even if there are additional pages.
 *   If unspecified, at most 50 resources will be returned.
 *   The maximum value is 200; (higher values will be coerced to the maximum)
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListAccounts` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListAccounts` must
 *   match the call that provided the page token.
 * @param {boolean} request.showDeleted
 *   Whether to include soft-deleted (ie: "trashed") Accounts in the
 *   results. Accounts can be inspected to determine whether they are deleted or
 *   not.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Account]{@link google.analytics.admin.v1alpha.Account}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listAccountsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listAccounts(
      request: protos.google.analytics.admin.v1alpha.IListAccountsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListAccountsRequest,
          protos.google.analytics.admin.v1alpha.IListAccountsResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IAccount>,
      callback?: PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListAccountsRequest,
          protos.google.analytics.admin.v1alpha.IListAccountsResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IAccount>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IAccount[],
        protos.google.analytics.admin.v1alpha.IListAccountsRequest|null,
        protos.google.analytics.admin.v1alpha.IListAccountsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.listAccounts(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   The maximum number of resources to return. The service may return
 *   fewer than this value, even if there are additional pages.
 *   If unspecified, at most 50 resources will be returned.
 *   The maximum value is 200; (higher values will be coerced to the maximum)
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListAccounts` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListAccounts` must
 *   match the call that provided the page token.
 * @param {boolean} request.showDeleted
 *   Whether to include soft-deleted (ie: "trashed") Accounts in the
 *   results. Accounts can be inspected to determine whether they are deleted or
 *   not.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Account]{@link google.analytics.admin.v1alpha.Account} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listAccountsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listAccountsStream(
      request?: protos.google.analytics.admin.v1alpha.IListAccountsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listAccounts.createStream(
      this.innerApiCalls.listAccounts as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listAccounts`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   The maximum number of resources to return. The service may return
 *   fewer than this value, even if there are additional pages.
 *   If unspecified, at most 50 resources will be returned.
 *   The maximum value is 200; (higher values will be coerced to the maximum)
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListAccounts` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListAccounts` must
 *   match the call that provided the page token.
 * @param {boolean} request.showDeleted
 *   Whether to include soft-deleted (ie: "trashed") Accounts in the
 *   results. Accounts can be inspected to determine whether they are deleted or
 *   not.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Account]{@link google.analytics.admin.v1alpha.Account}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listAccountsAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listAccountsAsync(
      request?: protos.google.analytics.admin.v1alpha.IListAccountsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.analytics.admin.v1alpha.IAccount>{
    request = request || {};
    options = options || {};
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listAccounts.asyncIterate(
      this.innerApiCalls['listAccounts'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.analytics.admin.v1alpha.IAccount>;
  }
  listAccountSummaries(
      request: protos.google.analytics.admin.v1alpha.IListAccountSummariesRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IAccountSummary[],
        protos.google.analytics.admin.v1alpha.IListAccountSummariesRequest|null,
        protos.google.analytics.admin.v1alpha.IListAccountSummariesResponse
      ]>;
  listAccountSummaries(
      request: protos.google.analytics.admin.v1alpha.IListAccountSummariesRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListAccountSummariesRequest,
          protos.google.analytics.admin.v1alpha.IListAccountSummariesResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IAccountSummary>): void;
  listAccountSummaries(
      request: protos.google.analytics.admin.v1alpha.IListAccountSummariesRequest,
      callback: PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListAccountSummariesRequest,
          protos.google.analytics.admin.v1alpha.IListAccountSummariesResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IAccountSummary>): void;
/**
 * Returns summaries of all accounts accessible by the caller.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   The maximum number of AccountSummary resources to return. The service may
 *   return fewer than this value, even if there are additional pages.
 *   If unspecified, at most 50 resources will be returned.
 *   The maximum value is 200; (higher values will be coerced to the maximum)
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListAccountSummaries` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListAccountSummaries`
 *   must match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [AccountSummary]{@link google.analytics.admin.v1alpha.AccountSummary}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listAccountSummariesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listAccountSummaries(
      request: protos.google.analytics.admin.v1alpha.IListAccountSummariesRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListAccountSummariesRequest,
          protos.google.analytics.admin.v1alpha.IListAccountSummariesResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IAccountSummary>,
      callback?: PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListAccountSummariesRequest,
          protos.google.analytics.admin.v1alpha.IListAccountSummariesResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IAccountSummary>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IAccountSummary[],
        protos.google.analytics.admin.v1alpha.IListAccountSummariesRequest|null,
        protos.google.analytics.admin.v1alpha.IListAccountSummariesResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.listAccountSummaries(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   The maximum number of AccountSummary resources to return. The service may
 *   return fewer than this value, even if there are additional pages.
 *   If unspecified, at most 50 resources will be returned.
 *   The maximum value is 200; (higher values will be coerced to the maximum)
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListAccountSummaries` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListAccountSummaries`
 *   must match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [AccountSummary]{@link google.analytics.admin.v1alpha.AccountSummary} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listAccountSummariesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listAccountSummariesStream(
      request?: protos.google.analytics.admin.v1alpha.IListAccountSummariesRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listAccountSummaries.createStream(
      this.innerApiCalls.listAccountSummaries as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listAccountSummaries`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {number} request.pageSize
 *   The maximum number of AccountSummary resources to return. The service may
 *   return fewer than this value, even if there are additional pages.
 *   If unspecified, at most 50 resources will be returned.
 *   The maximum value is 200; (higher values will be coerced to the maximum)
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListAccountSummaries` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListAccountSummaries`
 *   must match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [AccountSummary]{@link google.analytics.admin.v1alpha.AccountSummary}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listAccountSummariesAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listAccountSummariesAsync(
      request?: protos.google.analytics.admin.v1alpha.IListAccountSummariesRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.analytics.admin.v1alpha.IAccountSummary>{
    request = request || {};
    options = options || {};
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listAccountSummaries.asyncIterate(
      this.innerApiCalls['listAccountSummaries'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.analytics.admin.v1alpha.IAccountSummary>;
  }
  listProperties(
      request: protos.google.analytics.admin.v1alpha.IListPropertiesRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IProperty[],
        protos.google.analytics.admin.v1alpha.IListPropertiesRequest|null,
        protos.google.analytics.admin.v1alpha.IListPropertiesResponse
      ]>;
  listProperties(
      request: protos.google.analytics.admin.v1alpha.IListPropertiesRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListPropertiesRequest,
          protos.google.analytics.admin.v1alpha.IListPropertiesResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IProperty>): void;
  listProperties(
      request: protos.google.analytics.admin.v1alpha.IListPropertiesRequest,
      callback: PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListPropertiesRequest,
          protos.google.analytics.admin.v1alpha.IListPropertiesResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IProperty>): void;
/**
 * Returns child Properties under the specified parent Account.
 *
 * Only "GA4" properties will be returned.
 * Properties will be excluded if the caller does not have access.
 * Soft-deleted (ie: "trashed") properties are excluded by default.
 * Returns an empty list if no relevant properties are found.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.filter
 *   Required. An expression for filtering the results of the request.
 *   Fields eligible for filtering are:
 *   `parent:`(The resource name of the parent account) or
 *   `firebase_project:`(The id or number of the linked firebase project).
 *   Some examples of filters:
 *
 *   ```
 *   | Filter                      | Description                               |
 *   |-----------------------------|-------------------------------------------|
 *   | parent:accounts/123         | The account with account id: 123.         |
 *   | firebase_project:project-id | The firebase project with id: project-id. |
 *   | firebase_project:123        | The firebase project with number: 123.    |
 *   ```
 * @param {number} request.pageSize
 *   The maximum number of resources to return. The service may return
 *   fewer than this value, even if there are additional pages.
 *   If unspecified, at most 50 resources will be returned.
 *   The maximum value is 200; (higher values will be coerced to the maximum)
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListProperties` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListProperties` must
 *   match the call that provided the page token.
 * @param {boolean} request.showDeleted
 *   Whether to include soft-deleted (ie: "trashed") Properties in the
 *   results. Properties can be inspected to determine whether they are deleted
 *   or not.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Property]{@link google.analytics.admin.v1alpha.Property}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listPropertiesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listProperties(
      request: protos.google.analytics.admin.v1alpha.IListPropertiesRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListPropertiesRequest,
          protos.google.analytics.admin.v1alpha.IListPropertiesResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IProperty>,
      callback?: PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListPropertiesRequest,
          protos.google.analytics.admin.v1alpha.IListPropertiesResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IProperty>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IProperty[],
        protos.google.analytics.admin.v1alpha.IListPropertiesRequest|null,
        protos.google.analytics.admin.v1alpha.IListPropertiesResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.listProperties(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.filter
 *   Required. An expression for filtering the results of the request.
 *   Fields eligible for filtering are:
 *   `parent:`(The resource name of the parent account) or
 *   `firebase_project:`(The id or number of the linked firebase project).
 *   Some examples of filters:
 *
 *   ```
 *   | Filter                      | Description                               |
 *   |-----------------------------|-------------------------------------------|
 *   | parent:accounts/123         | The account with account id: 123.         |
 *   | firebase_project:project-id | The firebase project with id: project-id. |
 *   | firebase_project:123        | The firebase project with number: 123.    |
 *   ```
 * @param {number} request.pageSize
 *   The maximum number of resources to return. The service may return
 *   fewer than this value, even if there are additional pages.
 *   If unspecified, at most 50 resources will be returned.
 *   The maximum value is 200; (higher values will be coerced to the maximum)
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListProperties` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListProperties` must
 *   match the call that provided the page token.
 * @param {boolean} request.showDeleted
 *   Whether to include soft-deleted (ie: "trashed") Properties in the
 *   results. Properties can be inspected to determine whether they are deleted
 *   or not.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Property]{@link google.analytics.admin.v1alpha.Property} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listPropertiesAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listPropertiesStream(
      request?: protos.google.analytics.admin.v1alpha.IListPropertiesRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listProperties.createStream(
      this.innerApiCalls.listProperties as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listProperties`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.filter
 *   Required. An expression for filtering the results of the request.
 *   Fields eligible for filtering are:
 *   `parent:`(The resource name of the parent account) or
 *   `firebase_project:`(The id or number of the linked firebase project).
 *   Some examples of filters:
 *
 *   ```
 *   | Filter                      | Description                               |
 *   |-----------------------------|-------------------------------------------|
 *   | parent:accounts/123         | The account with account id: 123.         |
 *   | firebase_project:project-id | The firebase project with id: project-id. |
 *   | firebase_project:123        | The firebase project with number: 123.    |
 *   ```
 * @param {number} request.pageSize
 *   The maximum number of resources to return. The service may return
 *   fewer than this value, even if there are additional pages.
 *   If unspecified, at most 50 resources will be returned.
 *   The maximum value is 200; (higher values will be coerced to the maximum)
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListProperties` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListProperties` must
 *   match the call that provided the page token.
 * @param {boolean} request.showDeleted
 *   Whether to include soft-deleted (ie: "trashed") Properties in the
 *   results. Properties can be inspected to determine whether they are deleted
 *   or not.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Property]{@link google.analytics.admin.v1alpha.Property}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listPropertiesAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listPropertiesAsync(
      request?: protos.google.analytics.admin.v1alpha.IListPropertiesRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.analytics.admin.v1alpha.IProperty>{
    request = request || {};
    options = options || {};
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listProperties.asyncIterate(
      this.innerApiCalls['listProperties'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.analytics.admin.v1alpha.IProperty>;
  }
  listUserLinks(
      request: protos.google.analytics.admin.v1alpha.IListUserLinksRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IUserLink[],
        protos.google.analytics.admin.v1alpha.IListUserLinksRequest|null,
        protos.google.analytics.admin.v1alpha.IListUserLinksResponse
      ]>;
  listUserLinks(
      request: protos.google.analytics.admin.v1alpha.IListUserLinksRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListUserLinksRequest,
          protos.google.analytics.admin.v1alpha.IListUserLinksResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IUserLink>): void;
  listUserLinks(
      request: protos.google.analytics.admin.v1alpha.IListUserLinksRequest,
      callback: PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListUserLinksRequest,
          protos.google.analytics.admin.v1alpha.IListUserLinksResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IUserLink>): void;
/**
 * Lists all user links on an account or property.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Example format: accounts/1234
 * @param {number} request.pageSize
 *   The maximum number of user links to return.
 *   The service may return fewer than this value.
 *   If unspecified, at most 200 user links will be returned.
 *   The maximum value is 500; values above 500 will be coerced to 500.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListUserLinks` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListUserLinks` must
 *   match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [UserLink]{@link google.analytics.admin.v1alpha.UserLink}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listUserLinksAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listUserLinks(
      request: protos.google.analytics.admin.v1alpha.IListUserLinksRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListUserLinksRequest,
          protos.google.analytics.admin.v1alpha.IListUserLinksResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IUserLink>,
      callback?: PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListUserLinksRequest,
          protos.google.analytics.admin.v1alpha.IListUserLinksResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IUserLink>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IUserLink[],
        protos.google.analytics.admin.v1alpha.IListUserLinksRequest|null,
        protos.google.analytics.admin.v1alpha.IListUserLinksResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listUserLinks(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Example format: accounts/1234
 * @param {number} request.pageSize
 *   The maximum number of user links to return.
 *   The service may return fewer than this value.
 *   If unspecified, at most 200 user links will be returned.
 *   The maximum value is 500; values above 500 will be coerced to 500.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListUserLinks` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListUserLinks` must
 *   match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [UserLink]{@link google.analytics.admin.v1alpha.UserLink} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listUserLinksAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listUserLinksStream(
      request?: protos.google.analytics.admin.v1alpha.IListUserLinksRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listUserLinks.createStream(
      this.innerApiCalls.listUserLinks as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listUserLinks`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Example format: accounts/1234
 * @param {number} request.pageSize
 *   The maximum number of user links to return.
 *   The service may return fewer than this value.
 *   If unspecified, at most 200 user links will be returned.
 *   The maximum value is 500; values above 500 will be coerced to 500.
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListUserLinks` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListUserLinks` must
 *   match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [UserLink]{@link google.analytics.admin.v1alpha.UserLink}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listUserLinksAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listUserLinksAsync(
      request?: protos.google.analytics.admin.v1alpha.IListUserLinksRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.analytics.admin.v1alpha.IUserLink>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listUserLinks.asyncIterate(
      this.innerApiCalls['listUserLinks'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.analytics.admin.v1alpha.IUserLink>;
  }
  auditUserLinks(
      request: protos.google.analytics.admin.v1alpha.IAuditUserLinksRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IAuditUserLink[],
        protos.google.analytics.admin.v1alpha.IAuditUserLinksRequest|null,
        protos.google.analytics.admin.v1alpha.IAuditUserLinksResponse
      ]>;
  auditUserLinks(
      request: protos.google.analytics.admin.v1alpha.IAuditUserLinksRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.analytics.admin.v1alpha.IAuditUserLinksRequest,
          protos.google.analytics.admin.v1alpha.IAuditUserLinksResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IAuditUserLink>): void;
  auditUserLinks(
      request: protos.google.analytics.admin.v1alpha.IAuditUserLinksRequest,
      callback: PaginationCallback<
          protos.google.analytics.admin.v1alpha.IAuditUserLinksRequest,
          protos.google.analytics.admin.v1alpha.IAuditUserLinksResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IAuditUserLink>): void;
/**
 * Lists all user links on an account or property, including implicit ones
 * that come from effective permissions granted by groups or organization
 * admin roles.
 *
 * If a returned user link does not have direct permissions, they cannot
 * be removed from the account or property directly with the DeleteUserLink
 * command. They have to be removed from the group/etc that gives them
 * permissions, which is currently only usable/discoverable in the GA or GMP
 * UIs.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Example format: accounts/1234
 * @param {number} request.pageSize
 *   The maximum number of user links to return.
 *   The service may return fewer than this value.
 *   If unspecified, at most 1000 user links will be returned.
 *   The maximum value is 5000; values above 5000 will be coerced to 5000.
 * @param {string} request.pageToken
 *   A page token, received from a previous `AuditUserLinks` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `AuditUserLinks` must
 *   match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [AuditUserLink]{@link google.analytics.admin.v1alpha.AuditUserLink}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `auditUserLinksAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  auditUserLinks(
      request: protos.google.analytics.admin.v1alpha.IAuditUserLinksRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.analytics.admin.v1alpha.IAuditUserLinksRequest,
          protos.google.analytics.admin.v1alpha.IAuditUserLinksResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IAuditUserLink>,
      callback?: PaginationCallback<
          protos.google.analytics.admin.v1alpha.IAuditUserLinksRequest,
          protos.google.analytics.admin.v1alpha.IAuditUserLinksResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IAuditUserLink>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IAuditUserLink[],
        protos.google.analytics.admin.v1alpha.IAuditUserLinksRequest|null,
        protos.google.analytics.admin.v1alpha.IAuditUserLinksResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.auditUserLinks(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Example format: accounts/1234
 * @param {number} request.pageSize
 *   The maximum number of user links to return.
 *   The service may return fewer than this value.
 *   If unspecified, at most 1000 user links will be returned.
 *   The maximum value is 5000; values above 5000 will be coerced to 5000.
 * @param {string} request.pageToken
 *   A page token, received from a previous `AuditUserLinks` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `AuditUserLinks` must
 *   match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [AuditUserLink]{@link google.analytics.admin.v1alpha.AuditUserLink} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `auditUserLinksAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  auditUserLinksStream(
      request?: protos.google.analytics.admin.v1alpha.IAuditUserLinksRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.auditUserLinks.createStream(
      this.innerApiCalls.auditUserLinks as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `auditUserLinks`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Example format: accounts/1234
 * @param {number} request.pageSize
 *   The maximum number of user links to return.
 *   The service may return fewer than this value.
 *   If unspecified, at most 1000 user links will be returned.
 *   The maximum value is 5000; values above 5000 will be coerced to 5000.
 * @param {string} request.pageToken
 *   A page token, received from a previous `AuditUserLinks` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `AuditUserLinks` must
 *   match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [AuditUserLink]{@link google.analytics.admin.v1alpha.AuditUserLink}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.auditUserLinksAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  auditUserLinksAsync(
      request?: protos.google.analytics.admin.v1alpha.IAuditUserLinksRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.analytics.admin.v1alpha.IAuditUserLink>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.auditUserLinks.asyncIterate(
      this.innerApiCalls['auditUserLinks'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.analytics.admin.v1alpha.IAuditUserLink>;
  }
  listWebDataStreams(
      request: protos.google.analytics.admin.v1alpha.IListWebDataStreamsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IWebDataStream[],
        protos.google.analytics.admin.v1alpha.IListWebDataStreamsRequest|null,
        protos.google.analytics.admin.v1alpha.IListWebDataStreamsResponse
      ]>;
  listWebDataStreams(
      request: protos.google.analytics.admin.v1alpha.IListWebDataStreamsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListWebDataStreamsRequest,
          protos.google.analytics.admin.v1alpha.IListWebDataStreamsResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IWebDataStream>): void;
  listWebDataStreams(
      request: protos.google.analytics.admin.v1alpha.IListWebDataStreamsRequest,
      callback: PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListWebDataStreamsRequest,
          protos.google.analytics.admin.v1alpha.IListWebDataStreamsResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IWebDataStream>): void;
/**
 * Returns child web data streams under the specified parent property.
 *
 * Web data streams will be excluded if the caller does not have access.
 * Returns an empty list if no relevant web data streams are found.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the parent property.
 *   For example, to list results of web streams under the property with Id
 *   123: "properties/123"
 * @param {number} request.pageSize
 *   The maximum number of resources to return.
 *   If unspecified, at most 50 resources will be returned.
 *   The maximum value is 200; (higher values will be coerced to the maximum)
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListWebDataStreams` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListWebDataStreams` must
 *   match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [WebDataStream]{@link google.analytics.admin.v1alpha.WebDataStream}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listWebDataStreamsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listWebDataStreams(
      request: protos.google.analytics.admin.v1alpha.IListWebDataStreamsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListWebDataStreamsRequest,
          protos.google.analytics.admin.v1alpha.IListWebDataStreamsResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IWebDataStream>,
      callback?: PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListWebDataStreamsRequest,
          protos.google.analytics.admin.v1alpha.IListWebDataStreamsResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IWebDataStream>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IWebDataStream[],
        protos.google.analytics.admin.v1alpha.IListWebDataStreamsRequest|null,
        protos.google.analytics.admin.v1alpha.IListWebDataStreamsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listWebDataStreams(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the parent property.
 *   For example, to list results of web streams under the property with Id
 *   123: "properties/123"
 * @param {number} request.pageSize
 *   The maximum number of resources to return.
 *   If unspecified, at most 50 resources will be returned.
 *   The maximum value is 200; (higher values will be coerced to the maximum)
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListWebDataStreams` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListWebDataStreams` must
 *   match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [WebDataStream]{@link google.analytics.admin.v1alpha.WebDataStream} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listWebDataStreamsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listWebDataStreamsStream(
      request?: protos.google.analytics.admin.v1alpha.IListWebDataStreamsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listWebDataStreams.createStream(
      this.innerApiCalls.listWebDataStreams as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listWebDataStreams`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the parent property.
 *   For example, to list results of web streams under the property with Id
 *   123: "properties/123"
 * @param {number} request.pageSize
 *   The maximum number of resources to return.
 *   If unspecified, at most 50 resources will be returned.
 *   The maximum value is 200; (higher values will be coerced to the maximum)
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListWebDataStreams` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListWebDataStreams` must
 *   match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [WebDataStream]{@link google.analytics.admin.v1alpha.WebDataStream}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listWebDataStreamsAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listWebDataStreamsAsync(
      request?: protos.google.analytics.admin.v1alpha.IListWebDataStreamsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.analytics.admin.v1alpha.IWebDataStream>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listWebDataStreams.asyncIterate(
      this.innerApiCalls['listWebDataStreams'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.analytics.admin.v1alpha.IWebDataStream>;
  }
  listIosAppDataStreams(
      request: protos.google.analytics.admin.v1alpha.IListIosAppDataStreamsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IIosAppDataStream[],
        protos.google.analytics.admin.v1alpha.IListIosAppDataStreamsRequest|null,
        protos.google.analytics.admin.v1alpha.IListIosAppDataStreamsResponse
      ]>;
  listIosAppDataStreams(
      request: protos.google.analytics.admin.v1alpha.IListIosAppDataStreamsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListIosAppDataStreamsRequest,
          protos.google.analytics.admin.v1alpha.IListIosAppDataStreamsResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IIosAppDataStream>): void;
  listIosAppDataStreams(
      request: protos.google.analytics.admin.v1alpha.IListIosAppDataStreamsRequest,
      callback: PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListIosAppDataStreamsRequest,
          protos.google.analytics.admin.v1alpha.IListIosAppDataStreamsResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IIosAppDataStream>): void;
/**
 * Returns child iOS app data streams under the specified parent property.
 *
 * iOS app data streams will be excluded if the caller does not have access.
 * Returns an empty list if no relevant iOS app data streams are found.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the parent property.
 *   For example, to list results of app streams under the property with Id
 *   123: "properties/123"
 * @param {number} request.pageSize
 *   The maximum number of resources to return.
 *   If unspecified, at most 50 resources will be returned.
 *   The maximum value is 200; (higher values will be coerced to the maximum)
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListIosAppDataStreams`
 *   call. Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListIosAppDataStreams`
 *   must match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [IosAppDataStream]{@link google.analytics.admin.v1alpha.IosAppDataStream}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listIosAppDataStreamsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listIosAppDataStreams(
      request: protos.google.analytics.admin.v1alpha.IListIosAppDataStreamsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListIosAppDataStreamsRequest,
          protos.google.analytics.admin.v1alpha.IListIosAppDataStreamsResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IIosAppDataStream>,
      callback?: PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListIosAppDataStreamsRequest,
          protos.google.analytics.admin.v1alpha.IListIosAppDataStreamsResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IIosAppDataStream>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IIosAppDataStream[],
        protos.google.analytics.admin.v1alpha.IListIosAppDataStreamsRequest|null,
        protos.google.analytics.admin.v1alpha.IListIosAppDataStreamsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listIosAppDataStreams(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the parent property.
 *   For example, to list results of app streams under the property with Id
 *   123: "properties/123"
 * @param {number} request.pageSize
 *   The maximum number of resources to return.
 *   If unspecified, at most 50 resources will be returned.
 *   The maximum value is 200; (higher values will be coerced to the maximum)
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListIosAppDataStreams`
 *   call. Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListIosAppDataStreams`
 *   must match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [IosAppDataStream]{@link google.analytics.admin.v1alpha.IosAppDataStream} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listIosAppDataStreamsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listIosAppDataStreamsStream(
      request?: protos.google.analytics.admin.v1alpha.IListIosAppDataStreamsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listIosAppDataStreams.createStream(
      this.innerApiCalls.listIosAppDataStreams as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listIosAppDataStreams`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the parent property.
 *   For example, to list results of app streams under the property with Id
 *   123: "properties/123"
 * @param {number} request.pageSize
 *   The maximum number of resources to return.
 *   If unspecified, at most 50 resources will be returned.
 *   The maximum value is 200; (higher values will be coerced to the maximum)
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListIosAppDataStreams`
 *   call. Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListIosAppDataStreams`
 *   must match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [IosAppDataStream]{@link google.analytics.admin.v1alpha.IosAppDataStream}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listIosAppDataStreamsAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listIosAppDataStreamsAsync(
      request?: protos.google.analytics.admin.v1alpha.IListIosAppDataStreamsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.analytics.admin.v1alpha.IIosAppDataStream>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listIosAppDataStreams.asyncIterate(
      this.innerApiCalls['listIosAppDataStreams'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.analytics.admin.v1alpha.IIosAppDataStream>;
  }
  listAndroidAppDataStreams(
      request: protos.google.analytics.admin.v1alpha.IListAndroidAppDataStreamsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IAndroidAppDataStream[],
        protos.google.analytics.admin.v1alpha.IListAndroidAppDataStreamsRequest|null,
        protos.google.analytics.admin.v1alpha.IListAndroidAppDataStreamsResponse
      ]>;
  listAndroidAppDataStreams(
      request: protos.google.analytics.admin.v1alpha.IListAndroidAppDataStreamsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListAndroidAppDataStreamsRequest,
          protos.google.analytics.admin.v1alpha.IListAndroidAppDataStreamsResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IAndroidAppDataStream>): void;
  listAndroidAppDataStreams(
      request: protos.google.analytics.admin.v1alpha.IListAndroidAppDataStreamsRequest,
      callback: PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListAndroidAppDataStreamsRequest,
          protos.google.analytics.admin.v1alpha.IListAndroidAppDataStreamsResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IAndroidAppDataStream>): void;
/**
 * Returns child android app streams under the specified parent property.
 *
 * Android app streams will be excluded if the caller does not have access.
 * Returns an empty list if no relevant android app streams are found.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the parent property.
 *   For example, to limit results to app streams under the property with Id
 *   123: "properties/123"
 * @param {number} request.pageSize
 *   The maximum number of resources to return.
 *
 *   If unspecified, at most 50 resources will be returned.
 *   The maximum value is 200; (higher values will be coerced to the maximum)
 * @param {string} request.pageToken
 *   A page token, received from a previous call. Provide this to
 *   retrieve the subsequent page.
 *   When paginating, all other parameters provided to
 *   `ListAndroidAppDataStreams` must match the call that provided the page
 *   token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [AndroidAppDataStream]{@link google.analytics.admin.v1alpha.AndroidAppDataStream}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listAndroidAppDataStreamsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listAndroidAppDataStreams(
      request: protos.google.analytics.admin.v1alpha.IListAndroidAppDataStreamsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListAndroidAppDataStreamsRequest,
          protos.google.analytics.admin.v1alpha.IListAndroidAppDataStreamsResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IAndroidAppDataStream>,
      callback?: PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListAndroidAppDataStreamsRequest,
          protos.google.analytics.admin.v1alpha.IListAndroidAppDataStreamsResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IAndroidAppDataStream>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IAndroidAppDataStream[],
        protos.google.analytics.admin.v1alpha.IListAndroidAppDataStreamsRequest|null,
        protos.google.analytics.admin.v1alpha.IListAndroidAppDataStreamsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listAndroidAppDataStreams(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the parent property.
 *   For example, to limit results to app streams under the property with Id
 *   123: "properties/123"
 * @param {number} request.pageSize
 *   The maximum number of resources to return.
 *
 *   If unspecified, at most 50 resources will be returned.
 *   The maximum value is 200; (higher values will be coerced to the maximum)
 * @param {string} request.pageToken
 *   A page token, received from a previous call. Provide this to
 *   retrieve the subsequent page.
 *   When paginating, all other parameters provided to
 *   `ListAndroidAppDataStreams` must match the call that provided the page
 *   token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [AndroidAppDataStream]{@link google.analytics.admin.v1alpha.AndroidAppDataStream} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listAndroidAppDataStreamsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listAndroidAppDataStreamsStream(
      request?: protos.google.analytics.admin.v1alpha.IListAndroidAppDataStreamsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listAndroidAppDataStreams.createStream(
      this.innerApiCalls.listAndroidAppDataStreams as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listAndroidAppDataStreams`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The name of the parent property.
 *   For example, to limit results to app streams under the property with Id
 *   123: "properties/123"
 * @param {number} request.pageSize
 *   The maximum number of resources to return.
 *
 *   If unspecified, at most 50 resources will be returned.
 *   The maximum value is 200; (higher values will be coerced to the maximum)
 * @param {string} request.pageToken
 *   A page token, received from a previous call. Provide this to
 *   retrieve the subsequent page.
 *   When paginating, all other parameters provided to
 *   `ListAndroidAppDataStreams` must match the call that provided the page
 *   token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [AndroidAppDataStream]{@link google.analytics.admin.v1alpha.AndroidAppDataStream}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listAndroidAppDataStreamsAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listAndroidAppDataStreamsAsync(
      request?: protos.google.analytics.admin.v1alpha.IListAndroidAppDataStreamsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.analytics.admin.v1alpha.IAndroidAppDataStream>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listAndroidAppDataStreams.asyncIterate(
      this.innerApiCalls['listAndroidAppDataStreams'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.analytics.admin.v1alpha.IAndroidAppDataStream>;
  }
  listFirebaseLinks(
      request: protos.google.analytics.admin.v1alpha.IListFirebaseLinksRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IFirebaseLink[],
        protos.google.analytics.admin.v1alpha.IListFirebaseLinksRequest|null,
        protos.google.analytics.admin.v1alpha.IListFirebaseLinksResponse
      ]>;
  listFirebaseLinks(
      request: protos.google.analytics.admin.v1alpha.IListFirebaseLinksRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListFirebaseLinksRequest,
          protos.google.analytics.admin.v1alpha.IListFirebaseLinksResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IFirebaseLink>): void;
  listFirebaseLinks(
      request: protos.google.analytics.admin.v1alpha.IListFirebaseLinksRequest,
      callback: PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListFirebaseLinksRequest,
          protos.google.analytics.admin.v1alpha.IListFirebaseLinksResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IFirebaseLink>): void;
/**
 * Lists FirebaseLinks on a property.
 * Properties can have at most one FirebaseLink.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Format: properties/{property_id}
 *   Example: properties/1234
 * @param {number} request.pageSize
 *   The maximum number of resources to return. The service may return
 *   fewer than this value, even if there are additional pages.
 *   If unspecified, at most 50 resources will be returned.
 *   The maximum value is 200; (higher values will be coerced to the maximum)
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListFirebaseLinks` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListProperties` must
 *   match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [FirebaseLink]{@link google.analytics.admin.v1alpha.FirebaseLink}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listFirebaseLinksAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listFirebaseLinks(
      request: protos.google.analytics.admin.v1alpha.IListFirebaseLinksRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListFirebaseLinksRequest,
          protos.google.analytics.admin.v1alpha.IListFirebaseLinksResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IFirebaseLink>,
      callback?: PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListFirebaseLinksRequest,
          protos.google.analytics.admin.v1alpha.IListFirebaseLinksResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IFirebaseLink>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IFirebaseLink[],
        protos.google.analytics.admin.v1alpha.IListFirebaseLinksRequest|null,
        protos.google.analytics.admin.v1alpha.IListFirebaseLinksResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listFirebaseLinks(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Format: properties/{property_id}
 *   Example: properties/1234
 * @param {number} request.pageSize
 *   The maximum number of resources to return. The service may return
 *   fewer than this value, even if there are additional pages.
 *   If unspecified, at most 50 resources will be returned.
 *   The maximum value is 200; (higher values will be coerced to the maximum)
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListFirebaseLinks` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListProperties` must
 *   match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [FirebaseLink]{@link google.analytics.admin.v1alpha.FirebaseLink} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listFirebaseLinksAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listFirebaseLinksStream(
      request?: protos.google.analytics.admin.v1alpha.IListFirebaseLinksRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listFirebaseLinks.createStream(
      this.innerApiCalls.listFirebaseLinks as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listFirebaseLinks`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Format: properties/{property_id}
 *   Example: properties/1234
 * @param {number} request.pageSize
 *   The maximum number of resources to return. The service may return
 *   fewer than this value, even if there are additional pages.
 *   If unspecified, at most 50 resources will be returned.
 *   The maximum value is 200; (higher values will be coerced to the maximum)
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListFirebaseLinks` call.
 *   Provide this to retrieve the subsequent page.
 *   When paginating, all other parameters provided to `ListProperties` must
 *   match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [FirebaseLink]{@link google.analytics.admin.v1alpha.FirebaseLink}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listFirebaseLinksAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listFirebaseLinksAsync(
      request?: protos.google.analytics.admin.v1alpha.IListFirebaseLinksRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.analytics.admin.v1alpha.IFirebaseLink>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listFirebaseLinks.asyncIterate(
      this.innerApiCalls['listFirebaseLinks'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.analytics.admin.v1alpha.IFirebaseLink>;
  }
  listGoogleAdsLinks(
      request: protos.google.analytics.admin.v1alpha.IListGoogleAdsLinksRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IGoogleAdsLink[],
        protos.google.analytics.admin.v1alpha.IListGoogleAdsLinksRequest|null,
        protos.google.analytics.admin.v1alpha.IListGoogleAdsLinksResponse
      ]>;
  listGoogleAdsLinks(
      request: protos.google.analytics.admin.v1alpha.IListGoogleAdsLinksRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListGoogleAdsLinksRequest,
          protos.google.analytics.admin.v1alpha.IListGoogleAdsLinksResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IGoogleAdsLink>): void;
  listGoogleAdsLinks(
      request: protos.google.analytics.admin.v1alpha.IListGoogleAdsLinksRequest,
      callback: PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListGoogleAdsLinksRequest,
          protos.google.analytics.admin.v1alpha.IListGoogleAdsLinksResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IGoogleAdsLink>): void;
/**
 * Lists GoogleAdsLinks on a property.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Example format: properties/1234
 * @param {number} request.pageSize
 *   The maximum number of resources to return.
 *   If unspecified, at most 50 resources will be returned.
 *   The maximum value is 200 (higher values will be coerced to the maximum).
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListGoogleAdsLinks` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListGoogleAdsLinks` must
 *   match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [GoogleAdsLink]{@link google.analytics.admin.v1alpha.GoogleAdsLink}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listGoogleAdsLinksAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listGoogleAdsLinks(
      request: protos.google.analytics.admin.v1alpha.IListGoogleAdsLinksRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListGoogleAdsLinksRequest,
          protos.google.analytics.admin.v1alpha.IListGoogleAdsLinksResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IGoogleAdsLink>,
      callback?: PaginationCallback<
          protos.google.analytics.admin.v1alpha.IListGoogleAdsLinksRequest,
          protos.google.analytics.admin.v1alpha.IListGoogleAdsLinksResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IGoogleAdsLink>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IGoogleAdsLink[],
        protos.google.analytics.admin.v1alpha.IListGoogleAdsLinksRequest|null,
        protos.google.analytics.admin.v1alpha.IListGoogleAdsLinksResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listGoogleAdsLinks(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Example format: properties/1234
 * @param {number} request.pageSize
 *   The maximum number of resources to return.
 *   If unspecified, at most 50 resources will be returned.
 *   The maximum value is 200 (higher values will be coerced to the maximum).
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListGoogleAdsLinks` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListGoogleAdsLinks` must
 *   match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [GoogleAdsLink]{@link google.analytics.admin.v1alpha.GoogleAdsLink} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listGoogleAdsLinksAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listGoogleAdsLinksStream(
      request?: protos.google.analytics.admin.v1alpha.IListGoogleAdsLinksRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listGoogleAdsLinks.createStream(
      this.innerApiCalls.listGoogleAdsLinks as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listGoogleAdsLinks`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. Example format: properties/1234
 * @param {number} request.pageSize
 *   The maximum number of resources to return.
 *   If unspecified, at most 50 resources will be returned.
 *   The maximum value is 200 (higher values will be coerced to the maximum).
 * @param {string} request.pageToken
 *   A page token, received from a previous `ListGoogleAdsLinks` call.
 *   Provide this to retrieve the subsequent page.
 *
 *   When paginating, all other parameters provided to `ListGoogleAdsLinks` must
 *   match the call that provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [GoogleAdsLink]{@link google.analytics.admin.v1alpha.GoogleAdsLink}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listGoogleAdsLinksAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listGoogleAdsLinksAsync(
      request?: protos.google.analytics.admin.v1alpha.IListGoogleAdsLinksRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.analytics.admin.v1alpha.IGoogleAdsLink>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listGoogleAdsLinks.asyncIterate(
      this.innerApiCalls['listGoogleAdsLinks'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.analytics.admin.v1alpha.IGoogleAdsLink>;
  }
  searchChangeHistoryEvents(
      request: protos.google.analytics.admin.v1alpha.ISearchChangeHistoryEventsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.analytics.admin.v1alpha.IChangeHistoryEvent[],
        protos.google.analytics.admin.v1alpha.ISearchChangeHistoryEventsRequest|null,
        protos.google.analytics.admin.v1alpha.ISearchChangeHistoryEventsResponse
      ]>;
  searchChangeHistoryEvents(
      request: protos.google.analytics.admin.v1alpha.ISearchChangeHistoryEventsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.analytics.admin.v1alpha.ISearchChangeHistoryEventsRequest,
          protos.google.analytics.admin.v1alpha.ISearchChangeHistoryEventsResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IChangeHistoryEvent>): void;
  searchChangeHistoryEvents(
      request: protos.google.analytics.admin.v1alpha.ISearchChangeHistoryEventsRequest,
      callback: PaginationCallback<
          protos.google.analytics.admin.v1alpha.ISearchChangeHistoryEventsRequest,
          protos.google.analytics.admin.v1alpha.ISearchChangeHistoryEventsResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IChangeHistoryEvent>): void;
/**
 * Searches through all changes to an account or its children given the
 * specified set of filters.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.account
 *   Required. The account resource for which to return change history resources.
 * @param {string} [request.property]
 *   Optional. Resource name for a child property. If set, only return changes
 *   made to this property or its child resources.
 * @param {number[]} [request.resourceType]
 *   Optional. If set, only return changes if they are for a resource that matches at
 *   least one of these types.
 * @param {number[]} [request.action]
 *   Optional. If set, only return changes that match one or more of these types of
 *   actions.
 * @param {string[]} [request.actorEmail]
 *   Optional. If set, only return changes if they are made by a user in this list.
 * @param {google.protobuf.Timestamp} [request.earliestChangeTime]
 *   Optional. If set, only return changes made after this time (inclusive).
 * @param {google.protobuf.Timestamp} [request.latestChangeTime]
 *   Optional. If set, only return changes made before this time (inclusive).
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of ChangeHistoryEvent items to return.
 *   The service may return fewer than this value, even if there are additional
 *   pages. If unspecified, at most 50 items will be returned.
 *   The maximum value is 200 (higher values will be coerced to the maximum).
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous `SearchChangeHistoryEvents` call.
 *   Provide this to retrieve the subsequent page. When paginating, all other
 *   parameters provided to `SearchChangeHistoryEvents` must match the call that
 *   provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [ChangeHistoryEvent]{@link google.analytics.admin.v1alpha.ChangeHistoryEvent}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `searchChangeHistoryEventsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  searchChangeHistoryEvents(
      request: protos.google.analytics.admin.v1alpha.ISearchChangeHistoryEventsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.analytics.admin.v1alpha.ISearchChangeHistoryEventsRequest,
          protos.google.analytics.admin.v1alpha.ISearchChangeHistoryEventsResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IChangeHistoryEvent>,
      callback?: PaginationCallback<
          protos.google.analytics.admin.v1alpha.ISearchChangeHistoryEventsRequest,
          protos.google.analytics.admin.v1alpha.ISearchChangeHistoryEventsResponse|null|undefined,
          protos.google.analytics.admin.v1alpha.IChangeHistoryEvent>):
      Promise<[
        protos.google.analytics.admin.v1alpha.IChangeHistoryEvent[],
        protos.google.analytics.admin.v1alpha.ISearchChangeHistoryEventsRequest|null,
        protos.google.analytics.admin.v1alpha.ISearchChangeHistoryEventsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'account': request.account || '',
    });
    this.initialize();
    return this.innerApiCalls.searchChangeHistoryEvents(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.account
 *   Required. The account resource for which to return change history resources.
 * @param {string} [request.property]
 *   Optional. Resource name for a child property. If set, only return changes
 *   made to this property or its child resources.
 * @param {number[]} [request.resourceType]
 *   Optional. If set, only return changes if they are for a resource that matches at
 *   least one of these types.
 * @param {number[]} [request.action]
 *   Optional. If set, only return changes that match one or more of these types of
 *   actions.
 * @param {string[]} [request.actorEmail]
 *   Optional. If set, only return changes if they are made by a user in this list.
 * @param {google.protobuf.Timestamp} [request.earliestChangeTime]
 *   Optional. If set, only return changes made after this time (inclusive).
 * @param {google.protobuf.Timestamp} [request.latestChangeTime]
 *   Optional. If set, only return changes made before this time (inclusive).
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of ChangeHistoryEvent items to return.
 *   The service may return fewer than this value, even if there are additional
 *   pages. If unspecified, at most 50 items will be returned.
 *   The maximum value is 200 (higher values will be coerced to the maximum).
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous `SearchChangeHistoryEvents` call.
 *   Provide this to retrieve the subsequent page. When paginating, all other
 *   parameters provided to `SearchChangeHistoryEvents` must match the call that
 *   provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [ChangeHistoryEvent]{@link google.analytics.admin.v1alpha.ChangeHistoryEvent} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `searchChangeHistoryEventsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  searchChangeHistoryEventsStream(
      request?: protos.google.analytics.admin.v1alpha.ISearchChangeHistoryEventsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'account': request.account || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.searchChangeHistoryEvents.createStream(
      this.innerApiCalls.searchChangeHistoryEvents as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `searchChangeHistoryEvents`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.account
 *   Required. The account resource for which to return change history resources.
 * @param {string} [request.property]
 *   Optional. Resource name for a child property. If set, only return changes
 *   made to this property or its child resources.
 * @param {number[]} [request.resourceType]
 *   Optional. If set, only return changes if they are for a resource that matches at
 *   least one of these types.
 * @param {number[]} [request.action]
 *   Optional. If set, only return changes that match one or more of these types of
 *   actions.
 * @param {string[]} [request.actorEmail]
 *   Optional. If set, only return changes if they are made by a user in this list.
 * @param {google.protobuf.Timestamp} [request.earliestChangeTime]
 *   Optional. If set, only return changes made after this time (inclusive).
 * @param {google.protobuf.Timestamp} [request.latestChangeTime]
 *   Optional. If set, only return changes made before this time (inclusive).
 * @param {number} [request.pageSize]
 *   Optional. The maximum number of ChangeHistoryEvent items to return.
 *   The service may return fewer than this value, even if there are additional
 *   pages. If unspecified, at most 50 items will be returned.
 *   The maximum value is 200 (higher values will be coerced to the maximum).
 * @param {string} [request.pageToken]
 *   Optional. A page token, received from a previous `SearchChangeHistoryEvents` call.
 *   Provide this to retrieve the subsequent page. When paginating, all other
 *   parameters provided to `SearchChangeHistoryEvents` must match the call that
 *   provided the page token.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [ChangeHistoryEvent]{@link google.analytics.admin.v1alpha.ChangeHistoryEvent}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.searchChangeHistoryEventsAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  searchChangeHistoryEventsAsync(
      request?: protos.google.analytics.admin.v1alpha.ISearchChangeHistoryEventsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.analytics.admin.v1alpha.IChangeHistoryEvent>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'account': request.account || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.searchChangeHistoryEvents.asyncIterate(
      this.innerApiCalls['searchChangeHistoryEvents'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.analytics.admin.v1alpha.IChangeHistoryEvent>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified account resource name string.
   *
   * @param {string} account
   * @returns {string} Resource name string.
   */
  accountPath(account:string) {
    return this.pathTemplates.accountPathTemplate.render({
      account: account,
    });
  }

  /**
   * Parse the account from Account resource.
   *
   * @param {string} accountName
   *   A fully-qualified path representing Account resource.
   * @returns {string} A string representing the account.
   */
  matchAccountFromAccountName(accountName: string) {
    return this.pathTemplates.accountPathTemplate.match(accountName).account;
  }

  /**
   * Return a fully-qualified accountSummary resource name string.
   *
   * @param {string} account_summary
   * @returns {string} Resource name string.
   */
  accountSummaryPath(accountSummary:string) {
    return this.pathTemplates.accountSummaryPathTemplate.render({
      account_summary: accountSummary,
    });
  }

  /**
   * Parse the account_summary from AccountSummary resource.
   *
   * @param {string} accountSummaryName
   *   A fully-qualified path representing AccountSummary resource.
   * @returns {string} A string representing the account_summary.
   */
  matchAccountSummaryFromAccountSummaryName(accountSummaryName: string) {
    return this.pathTemplates.accountSummaryPathTemplate.match(accountSummaryName).account_summary;
  }

  /**
   * Return a fully-qualified accountUserLink resource name string.
   *
   * @param {string} account
   * @param {string} user_link
   * @returns {string} Resource name string.
   */
  accountUserLinkPath(account:string,userLink:string) {
    return this.pathTemplates.accountUserLinkPathTemplate.render({
      account: account,
      user_link: userLink,
    });
  }

  /**
   * Parse the account from AccountUserLink resource.
   *
   * @param {string} accountUserLinkName
   *   A fully-qualified path representing account_user_link resource.
   * @returns {string} A string representing the account.
   */
  matchAccountFromAccountUserLinkName(accountUserLinkName: string) {
    return this.pathTemplates.accountUserLinkPathTemplate.match(accountUserLinkName).account;
  }

  /**
   * Parse the user_link from AccountUserLink resource.
   *
   * @param {string} accountUserLinkName
   *   A fully-qualified path representing account_user_link resource.
   * @returns {string} A string representing the user_link.
   */
  matchUserLinkFromAccountUserLinkName(accountUserLinkName: string) {
    return this.pathTemplates.accountUserLinkPathTemplate.match(accountUserLinkName).user_link;
  }

  /**
   * Return a fully-qualified androidAppDataStream resource name string.
   *
   * @param {string} property
   * @param {string} android_app_data_stream
   * @returns {string} Resource name string.
   */
  androidAppDataStreamPath(property:string,androidAppDataStream:string) {
    return this.pathTemplates.androidAppDataStreamPathTemplate.render({
      property: property,
      android_app_data_stream: androidAppDataStream,
    });
  }

  /**
   * Parse the property from AndroidAppDataStream resource.
   *
   * @param {string} androidAppDataStreamName
   *   A fully-qualified path representing AndroidAppDataStream resource.
   * @returns {string} A string representing the property.
   */
  matchPropertyFromAndroidAppDataStreamName(androidAppDataStreamName: string) {
    return this.pathTemplates.androidAppDataStreamPathTemplate.match(androidAppDataStreamName).property;
  }

  /**
   * Parse the android_app_data_stream from AndroidAppDataStream resource.
   *
   * @param {string} androidAppDataStreamName
   *   A fully-qualified path representing AndroidAppDataStream resource.
   * @returns {string} A string representing the android_app_data_stream.
   */
  matchAndroidAppDataStreamFromAndroidAppDataStreamName(androidAppDataStreamName: string) {
    return this.pathTemplates.androidAppDataStreamPathTemplate.match(androidAppDataStreamName).android_app_data_stream;
  }

  /**
   * Return a fully-qualified dataSharingSettings resource name string.
   *
   * @param {string} account
   * @returns {string} Resource name string.
   */
  dataSharingSettingsPath(account:string) {
    return this.pathTemplates.dataSharingSettingsPathTemplate.render({
      account: account,
    });
  }

  /**
   * Parse the account from DataSharingSettings resource.
   *
   * @param {string} dataSharingSettingsName
   *   A fully-qualified path representing DataSharingSettings resource.
   * @returns {string} A string representing the account.
   */
  matchAccountFromDataSharingSettingsName(dataSharingSettingsName: string) {
    return this.pathTemplates.dataSharingSettingsPathTemplate.match(dataSharingSettingsName).account;
  }

  /**
   * Return a fully-qualified enhancedMeasurementSettings resource name string.
   *
   * @param {string} property
   * @param {string} web_data_stream
   * @returns {string} Resource name string.
   */
  enhancedMeasurementSettingsPath(property:string,webDataStream:string) {
    return this.pathTemplates.enhancedMeasurementSettingsPathTemplate.render({
      property: property,
      web_data_stream: webDataStream,
    });
  }

  /**
   * Parse the property from EnhancedMeasurementSettings resource.
   *
   * @param {string} enhancedMeasurementSettingsName
   *   A fully-qualified path representing EnhancedMeasurementSettings resource.
   * @returns {string} A string representing the property.
   */
  matchPropertyFromEnhancedMeasurementSettingsName(enhancedMeasurementSettingsName: string) {
    return this.pathTemplates.enhancedMeasurementSettingsPathTemplate.match(enhancedMeasurementSettingsName).property;
  }

  /**
   * Parse the web_data_stream from EnhancedMeasurementSettings resource.
   *
   * @param {string} enhancedMeasurementSettingsName
   *   A fully-qualified path representing EnhancedMeasurementSettings resource.
   * @returns {string} A string representing the web_data_stream.
   */
  matchWebDataStreamFromEnhancedMeasurementSettingsName(enhancedMeasurementSettingsName: string) {
    return this.pathTemplates.enhancedMeasurementSettingsPathTemplate.match(enhancedMeasurementSettingsName).web_data_stream;
  }

  /**
   * Return a fully-qualified firebaseLink resource name string.
   *
   * @param {string} property
   * @param {string} firebase_link
   * @returns {string} Resource name string.
   */
  firebaseLinkPath(property:string,firebaseLink:string) {
    return this.pathTemplates.firebaseLinkPathTemplate.render({
      property: property,
      firebase_link: firebaseLink,
    });
  }

  /**
   * Parse the property from FirebaseLink resource.
   *
   * @param {string} firebaseLinkName
   *   A fully-qualified path representing FirebaseLink resource.
   * @returns {string} A string representing the property.
   */
  matchPropertyFromFirebaseLinkName(firebaseLinkName: string) {
    return this.pathTemplates.firebaseLinkPathTemplate.match(firebaseLinkName).property;
  }

  /**
   * Parse the firebase_link from FirebaseLink resource.
   *
   * @param {string} firebaseLinkName
   *   A fully-qualified path representing FirebaseLink resource.
   * @returns {string} A string representing the firebase_link.
   */
  matchFirebaseLinkFromFirebaseLinkName(firebaseLinkName: string) {
    return this.pathTemplates.firebaseLinkPathTemplate.match(firebaseLinkName).firebase_link;
  }

  /**
   * Return a fully-qualified globalSiteTag resource name string.
   *
   * @param {string} property
   * @returns {string} Resource name string.
   */
  globalSiteTagPath(property:string) {
    return this.pathTemplates.globalSiteTagPathTemplate.render({
      property: property,
    });
  }

  /**
   * Parse the property from GlobalSiteTag resource.
   *
   * @param {string} globalSiteTagName
   *   A fully-qualified path representing GlobalSiteTag resource.
   * @returns {string} A string representing the property.
   */
  matchPropertyFromGlobalSiteTagName(globalSiteTagName: string) {
    return this.pathTemplates.globalSiteTagPathTemplate.match(globalSiteTagName).property;
  }

  /**
   * Return a fully-qualified googleAdsLink resource name string.
   *
   * @param {string} property
   * @param {string} google_ads_link
   * @returns {string} Resource name string.
   */
  googleAdsLinkPath(property:string,googleAdsLink:string) {
    return this.pathTemplates.googleAdsLinkPathTemplate.render({
      property: property,
      google_ads_link: googleAdsLink,
    });
  }

  /**
   * Parse the property from GoogleAdsLink resource.
   *
   * @param {string} googleAdsLinkName
   *   A fully-qualified path representing GoogleAdsLink resource.
   * @returns {string} A string representing the property.
   */
  matchPropertyFromGoogleAdsLinkName(googleAdsLinkName: string) {
    return this.pathTemplates.googleAdsLinkPathTemplate.match(googleAdsLinkName).property;
  }

  /**
   * Parse the google_ads_link from GoogleAdsLink resource.
   *
   * @param {string} googleAdsLinkName
   *   A fully-qualified path representing GoogleAdsLink resource.
   * @returns {string} A string representing the google_ads_link.
   */
  matchGoogleAdsLinkFromGoogleAdsLinkName(googleAdsLinkName: string) {
    return this.pathTemplates.googleAdsLinkPathTemplate.match(googleAdsLinkName).google_ads_link;
  }

  /**
   * Return a fully-qualified iosAppDataStream resource name string.
   *
   * @param {string} property
   * @param {string} ios_app_data_stream
   * @returns {string} Resource name string.
   */
  iosAppDataStreamPath(property:string,iosAppDataStream:string) {
    return this.pathTemplates.iosAppDataStreamPathTemplate.render({
      property: property,
      ios_app_data_stream: iosAppDataStream,
    });
  }

  /**
   * Parse the property from IosAppDataStream resource.
   *
   * @param {string} iosAppDataStreamName
   *   A fully-qualified path representing IosAppDataStream resource.
   * @returns {string} A string representing the property.
   */
  matchPropertyFromIosAppDataStreamName(iosAppDataStreamName: string) {
    return this.pathTemplates.iosAppDataStreamPathTemplate.match(iosAppDataStreamName).property;
  }

  /**
   * Parse the ios_app_data_stream from IosAppDataStream resource.
   *
   * @param {string} iosAppDataStreamName
   *   A fully-qualified path representing IosAppDataStream resource.
   * @returns {string} A string representing the ios_app_data_stream.
   */
  matchIosAppDataStreamFromIosAppDataStreamName(iosAppDataStreamName: string) {
    return this.pathTemplates.iosAppDataStreamPathTemplate.match(iosAppDataStreamName).ios_app_data_stream;
  }

  /**
   * Return a fully-qualified property resource name string.
   *
   * @param {string} property
   * @returns {string} Resource name string.
   */
  propertyPath(property:string) {
    return this.pathTemplates.propertyPathTemplate.render({
      property: property,
    });
  }

  /**
   * Parse the property from Property resource.
   *
   * @param {string} propertyName
   *   A fully-qualified path representing Property resource.
   * @returns {string} A string representing the property.
   */
  matchPropertyFromPropertyName(propertyName: string) {
    return this.pathTemplates.propertyPathTemplate.match(propertyName).property;
  }

  /**
   * Return a fully-qualified propertyUserLink resource name string.
   *
   * @param {string} property
   * @param {string} user_link
   * @returns {string} Resource name string.
   */
  propertyUserLinkPath(property:string,userLink:string) {
    return this.pathTemplates.propertyUserLinkPathTemplate.render({
      property: property,
      user_link: userLink,
    });
  }

  /**
   * Parse the property from PropertyUserLink resource.
   *
   * @param {string} propertyUserLinkName
   *   A fully-qualified path representing property_user_link resource.
   * @returns {string} A string representing the property.
   */
  matchPropertyFromPropertyUserLinkName(propertyUserLinkName: string) {
    return this.pathTemplates.propertyUserLinkPathTemplate.match(propertyUserLinkName).property;
  }

  /**
   * Parse the user_link from PropertyUserLink resource.
   *
   * @param {string} propertyUserLinkName
   *   A fully-qualified path representing property_user_link resource.
   * @returns {string} A string representing the user_link.
   */
  matchUserLinkFromPropertyUserLinkName(propertyUserLinkName: string) {
    return this.pathTemplates.propertyUserLinkPathTemplate.match(propertyUserLinkName).user_link;
  }

  /**
   * Return a fully-qualified webDataStream resource name string.
   *
   * @param {string} property
   * @param {string} web_data_stream
   * @returns {string} Resource name string.
   */
  webDataStreamPath(property:string,webDataStream:string) {
    return this.pathTemplates.webDataStreamPathTemplate.render({
      property: property,
      web_data_stream: webDataStream,
    });
  }

  /**
   * Parse the property from WebDataStream resource.
   *
   * @param {string} webDataStreamName
   *   A fully-qualified path representing WebDataStream resource.
   * @returns {string} A string representing the property.
   */
  matchPropertyFromWebDataStreamName(webDataStreamName: string) {
    return this.pathTemplates.webDataStreamPathTemplate.match(webDataStreamName).property;
  }

  /**
   * Parse the web_data_stream from WebDataStream resource.
   *
   * @param {string} webDataStreamName
   *   A fully-qualified path representing WebDataStream resource.
   * @returns {string} A string representing the web_data_stream.
   */
  matchWebDataStreamFromWebDataStreamName(webDataStreamName: string) {
    return this.pathTemplates.webDataStreamPathTemplate.match(webDataStreamName).web_data_stream;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.analyticsAdminServiceStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
