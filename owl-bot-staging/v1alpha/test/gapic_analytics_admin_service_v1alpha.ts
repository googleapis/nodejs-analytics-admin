// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as protos from '../protos/protos';
import * as assert from 'assert';
import * as sinon from 'sinon';
import {SinonStub} from 'sinon';
import { describe, it } from 'mocha';
import * as analyticsadminserviceModule from '../src';

import {PassThrough} from 'stream';

import {protobuf} from 'google-gax';

function generateSampleMessage<T extends object>(instance: T) {
    const filledObject = (instance.constructor as typeof protobuf.Message)
        .toObject(instance as protobuf.Message<T>, {defaults: true});
    return (instance.constructor as typeof protobuf.Message).fromObject(filledObject) as T;
}

function stubSimpleCall<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().rejects(error) : sinon.stub().resolves([response]);
}

function stubSimpleCallWithCallback<ResponseType>(response?: ResponseType, error?: Error) {
    return error ? sinon.stub().callsArgWith(2, error) : sinon.stub().callsArgWith(2, null, response);
}

function stubPageStreamingCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error ? sinon.stub().callsArgWith(2, error) : pagingStub;
    const mockStream = new PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => { mockStream.write({}); });
        }
        setImmediate(() => { mockStream.end(); });
    } else {
        setImmediate(() => { mockStream.write({}); });
        setImmediate(() => { mockStream.end(); });
    }
    return sinon.stub().returns(mockStream);
}

function stubAsyncIterationCall<ResponseType>(responses?: ResponseType[], error?: Error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses!.length) {
                        return Promise.resolve({done: true, value: undefined});
                    }
                    return Promise.resolve({done: false, value: responses![counter++]});
                }
            };
        }
    };
    return sinon.stub().returns(asyncIterable);
}

describe('v1alpha.AnalyticsAdminServiceClient', () => {
    it('has servicePath', () => {
        const servicePath = analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient.servicePath;
        assert(servicePath);
    });

    it('has apiEndpoint', () => {
        const apiEndpoint = analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient.apiEndpoint;
        assert(apiEndpoint);
    });

    it('has port', () => {
        const port = analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient.port;
        assert(port);
        assert(typeof port === 'number');
    });

    it('should create a client with no option', () => {
        const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient();
        assert(client);
    });

    it('should create a client with gRPC fallback', () => {
        const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
            fallback: true,
        });
        assert(client);
    });

    it('has initialize method and supports deferred initialization', async () => {
        const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        assert.strictEqual(client.analyticsAdminServiceStub, undefined);
        await client.initialize();
        assert(client.analyticsAdminServiceStub);
    });

    it('has close method', () => {
        const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.close();
    });

    it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert((client.auth.getProjectId as SinonStub).calledWithExactly());
    });

    it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err?: Error|null, projectId?: string|null) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });

    describe('getAccount', () => {
        it('invokes getAccount without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.GetAccountRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.Account());
            client.innerApiCalls.getAccount = stubSimpleCall(expectedResponse);
            const [response] = await client.getAccount(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getAccount without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.GetAccountRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.Account());
            client.innerApiCalls.getAccount = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getAccount(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IAccount|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getAccount with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.GetAccountRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getAccount = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getAccount(request), expectedError);
            assert((client.innerApiCalls.getAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteAccount', () => {
        it('invokes deleteAccount without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.DeleteAccountRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteAccount = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteAccount(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteAccount without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.DeleteAccountRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteAccount = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteAccount(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteAccount with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.DeleteAccountRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteAccount = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteAccount(request), expectedError);
            assert((client.innerApiCalls.deleteAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateAccount', () => {
        it('invokes updateAccount without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.UpdateAccountRequest());
            request.account = {};
            request.account.name = '';
            const expectedHeaderRequestParams = "account.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.Account());
            client.innerApiCalls.updateAccount = stubSimpleCall(expectedResponse);
            const [response] = await client.updateAccount(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateAccount without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.UpdateAccountRequest());
            request.account = {};
            request.account.name = '';
            const expectedHeaderRequestParams = "account.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.Account());
            client.innerApiCalls.updateAccount = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateAccount(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IAccount|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateAccount with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.UpdateAccountRequest());
            request.account = {};
            request.account.name = '';
            const expectedHeaderRequestParams = "account.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateAccount = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateAccount(request), expectedError);
            assert((client.innerApiCalls.updateAccount as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('provisionAccountTicket', () => {
        it('invokes provisionAccountTicket without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ProvisionAccountTicketRequest());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ProvisionAccountTicketResponse());
            client.innerApiCalls.provisionAccountTicket = stubSimpleCall(expectedResponse);
            const [response] = await client.provisionAccountTicket(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.provisionAccountTicket as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes provisionAccountTicket without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ProvisionAccountTicketRequest());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ProvisionAccountTicketResponse());
            client.innerApiCalls.provisionAccountTicket = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.provisionAccountTicket(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IProvisionAccountTicketResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.provisionAccountTicket as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes provisionAccountTicket with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ProvisionAccountTicketRequest());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.provisionAccountTicket = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.provisionAccountTicket(request), expectedError);
            assert((client.innerApiCalls.provisionAccountTicket as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getProperty', () => {
        it('invokes getProperty without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.GetPropertyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.Property());
            client.innerApiCalls.getProperty = stubSimpleCall(expectedResponse);
            const [response] = await client.getProperty(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getProperty as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getProperty without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.GetPropertyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.Property());
            client.innerApiCalls.getProperty = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getProperty(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IProperty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getProperty as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getProperty with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.GetPropertyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getProperty = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getProperty(request), expectedError);
            assert((client.innerApiCalls.getProperty as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createProperty', () => {
        it('invokes createProperty without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.CreatePropertyRequest());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.Property());
            client.innerApiCalls.createProperty = stubSimpleCall(expectedResponse);
            const [response] = await client.createProperty(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createProperty as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createProperty without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.CreatePropertyRequest());
            const expectedOptions = {};
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.Property());
            client.innerApiCalls.createProperty = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createProperty(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IProperty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createProperty as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createProperty with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.CreatePropertyRequest());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.createProperty = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createProperty(request), expectedError);
            assert((client.innerApiCalls.createProperty as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteProperty', () => {
        it('invokes deleteProperty without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.DeletePropertyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteProperty = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteProperty(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteProperty as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteProperty without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.DeletePropertyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteProperty = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteProperty(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteProperty as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteProperty with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.DeletePropertyRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteProperty = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteProperty(request), expectedError);
            assert((client.innerApiCalls.deleteProperty as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateProperty', () => {
        it('invokes updateProperty without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.UpdatePropertyRequest());
            request.property = {};
            request.property.name = '';
            const expectedHeaderRequestParams = "property.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.Property());
            client.innerApiCalls.updateProperty = stubSimpleCall(expectedResponse);
            const [response] = await client.updateProperty(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateProperty as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateProperty without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.UpdatePropertyRequest());
            request.property = {};
            request.property.name = '';
            const expectedHeaderRequestParams = "property.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.Property());
            client.innerApiCalls.updateProperty = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateProperty(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IProperty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateProperty as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateProperty with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.UpdatePropertyRequest());
            request.property = {};
            request.property.name = '';
            const expectedHeaderRequestParams = "property.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateProperty = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateProperty(request), expectedError);
            assert((client.innerApiCalls.updateProperty as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getUserLink', () => {
        it('invokes getUserLink without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.GetUserLinkRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.UserLink());
            client.innerApiCalls.getUserLink = stubSimpleCall(expectedResponse);
            const [response] = await client.getUserLink(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getUserLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getUserLink without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.GetUserLinkRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.UserLink());
            client.innerApiCalls.getUserLink = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getUserLink(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IUserLink|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getUserLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getUserLink with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.GetUserLinkRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getUserLink = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getUserLink(request), expectedError);
            assert((client.innerApiCalls.getUserLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('batchGetUserLinks', () => {
        it('invokes batchGetUserLinks without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.BatchGetUserLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.BatchGetUserLinksResponse());
            client.innerApiCalls.batchGetUserLinks = stubSimpleCall(expectedResponse);
            const [response] = await client.batchGetUserLinks(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.batchGetUserLinks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes batchGetUserLinks without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.BatchGetUserLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.BatchGetUserLinksResponse());
            client.innerApiCalls.batchGetUserLinks = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.batchGetUserLinks(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IBatchGetUserLinksResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.batchGetUserLinks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes batchGetUserLinks with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.BatchGetUserLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.batchGetUserLinks = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.batchGetUserLinks(request), expectedError);
            assert((client.innerApiCalls.batchGetUserLinks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createUserLink', () => {
        it('invokes createUserLink without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.CreateUserLinkRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.UserLink());
            client.innerApiCalls.createUserLink = stubSimpleCall(expectedResponse);
            const [response] = await client.createUserLink(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createUserLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createUserLink without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.CreateUserLinkRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.UserLink());
            client.innerApiCalls.createUserLink = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createUserLink(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IUserLink|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createUserLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createUserLink with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.CreateUserLinkRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createUserLink = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createUserLink(request), expectedError);
            assert((client.innerApiCalls.createUserLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('batchCreateUserLinks', () => {
        it('invokes batchCreateUserLinks without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.BatchCreateUserLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.BatchCreateUserLinksResponse());
            client.innerApiCalls.batchCreateUserLinks = stubSimpleCall(expectedResponse);
            const [response] = await client.batchCreateUserLinks(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.batchCreateUserLinks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes batchCreateUserLinks without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.BatchCreateUserLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.BatchCreateUserLinksResponse());
            client.innerApiCalls.batchCreateUserLinks = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.batchCreateUserLinks(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IBatchCreateUserLinksResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.batchCreateUserLinks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes batchCreateUserLinks with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.BatchCreateUserLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.batchCreateUserLinks = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.batchCreateUserLinks(request), expectedError);
            assert((client.innerApiCalls.batchCreateUserLinks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateUserLink', () => {
        it('invokes updateUserLink without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.UpdateUserLinkRequest());
            request.userLink = {};
            request.userLink.name = '';
            const expectedHeaderRequestParams = "user_link.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.UserLink());
            client.innerApiCalls.updateUserLink = stubSimpleCall(expectedResponse);
            const [response] = await client.updateUserLink(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateUserLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateUserLink without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.UpdateUserLinkRequest());
            request.userLink = {};
            request.userLink.name = '';
            const expectedHeaderRequestParams = "user_link.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.UserLink());
            client.innerApiCalls.updateUserLink = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateUserLink(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IUserLink|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateUserLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateUserLink with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.UpdateUserLinkRequest());
            request.userLink = {};
            request.userLink.name = '';
            const expectedHeaderRequestParams = "user_link.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateUserLink = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateUserLink(request), expectedError);
            assert((client.innerApiCalls.updateUserLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('batchUpdateUserLinks', () => {
        it('invokes batchUpdateUserLinks without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.BatchUpdateUserLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.BatchUpdateUserLinksResponse());
            client.innerApiCalls.batchUpdateUserLinks = stubSimpleCall(expectedResponse);
            const [response] = await client.batchUpdateUserLinks(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.batchUpdateUserLinks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes batchUpdateUserLinks without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.BatchUpdateUserLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.BatchUpdateUserLinksResponse());
            client.innerApiCalls.batchUpdateUserLinks = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.batchUpdateUserLinks(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IBatchUpdateUserLinksResponse|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.batchUpdateUserLinks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes batchUpdateUserLinks with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.BatchUpdateUserLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.batchUpdateUserLinks = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.batchUpdateUserLinks(request), expectedError);
            assert((client.innerApiCalls.batchUpdateUserLinks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteUserLink', () => {
        it('invokes deleteUserLink without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.DeleteUserLinkRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteUserLink = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteUserLink(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteUserLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteUserLink without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.DeleteUserLinkRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteUserLink = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteUserLink(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteUserLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteUserLink with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.DeleteUserLinkRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteUserLink = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteUserLink(request), expectedError);
            assert((client.innerApiCalls.deleteUserLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('batchDeleteUserLinks', () => {
        it('invokes batchDeleteUserLinks without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.BatchDeleteUserLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.batchDeleteUserLinks = stubSimpleCall(expectedResponse);
            const [response] = await client.batchDeleteUserLinks(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.batchDeleteUserLinks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes batchDeleteUserLinks without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.BatchDeleteUserLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.batchDeleteUserLinks = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.batchDeleteUserLinks(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.batchDeleteUserLinks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes batchDeleteUserLinks with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.BatchDeleteUserLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.batchDeleteUserLinks = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.batchDeleteUserLinks(request), expectedError);
            assert((client.innerApiCalls.batchDeleteUserLinks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getWebDataStream', () => {
        it('invokes getWebDataStream without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.GetWebDataStreamRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.WebDataStream());
            client.innerApiCalls.getWebDataStream = stubSimpleCall(expectedResponse);
            const [response] = await client.getWebDataStream(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getWebDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getWebDataStream without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.GetWebDataStreamRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.WebDataStream());
            client.innerApiCalls.getWebDataStream = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getWebDataStream(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IWebDataStream|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getWebDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getWebDataStream with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.GetWebDataStreamRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getWebDataStream = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getWebDataStream(request), expectedError);
            assert((client.innerApiCalls.getWebDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteWebDataStream', () => {
        it('invokes deleteWebDataStream without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.DeleteWebDataStreamRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteWebDataStream = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteWebDataStream(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteWebDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteWebDataStream without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.DeleteWebDataStreamRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteWebDataStream = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteWebDataStream(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteWebDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteWebDataStream with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.DeleteWebDataStreamRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteWebDataStream = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteWebDataStream(request), expectedError);
            assert((client.innerApiCalls.deleteWebDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateWebDataStream', () => {
        it('invokes updateWebDataStream without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.UpdateWebDataStreamRequest());
            request.webDataStream = {};
            request.webDataStream.name = '';
            const expectedHeaderRequestParams = "web_data_stream.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.WebDataStream());
            client.innerApiCalls.updateWebDataStream = stubSimpleCall(expectedResponse);
            const [response] = await client.updateWebDataStream(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateWebDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateWebDataStream without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.UpdateWebDataStreamRequest());
            request.webDataStream = {};
            request.webDataStream.name = '';
            const expectedHeaderRequestParams = "web_data_stream.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.WebDataStream());
            client.innerApiCalls.updateWebDataStream = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateWebDataStream(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IWebDataStream|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateWebDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateWebDataStream with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.UpdateWebDataStreamRequest());
            request.webDataStream = {};
            request.webDataStream.name = '';
            const expectedHeaderRequestParams = "web_data_stream.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateWebDataStream = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateWebDataStream(request), expectedError);
            assert((client.innerApiCalls.updateWebDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createWebDataStream', () => {
        it('invokes createWebDataStream without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.CreateWebDataStreamRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.WebDataStream());
            client.innerApiCalls.createWebDataStream = stubSimpleCall(expectedResponse);
            const [response] = await client.createWebDataStream(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createWebDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createWebDataStream without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.CreateWebDataStreamRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.WebDataStream());
            client.innerApiCalls.createWebDataStream = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createWebDataStream(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IWebDataStream|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createWebDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createWebDataStream with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.CreateWebDataStreamRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createWebDataStream = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createWebDataStream(request), expectedError);
            assert((client.innerApiCalls.createWebDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getIosAppDataStream', () => {
        it('invokes getIosAppDataStream without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.GetIosAppDataStreamRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.IosAppDataStream());
            client.innerApiCalls.getIosAppDataStream = stubSimpleCall(expectedResponse);
            const [response] = await client.getIosAppDataStream(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getIosAppDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getIosAppDataStream without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.GetIosAppDataStreamRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.IosAppDataStream());
            client.innerApiCalls.getIosAppDataStream = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getIosAppDataStream(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IIosAppDataStream|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getIosAppDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getIosAppDataStream with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.GetIosAppDataStreamRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getIosAppDataStream = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getIosAppDataStream(request), expectedError);
            assert((client.innerApiCalls.getIosAppDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteIosAppDataStream', () => {
        it('invokes deleteIosAppDataStream without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.DeleteIosAppDataStreamRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteIosAppDataStream = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteIosAppDataStream(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteIosAppDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteIosAppDataStream without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.DeleteIosAppDataStreamRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteIosAppDataStream = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteIosAppDataStream(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteIosAppDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteIosAppDataStream with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.DeleteIosAppDataStreamRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteIosAppDataStream = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteIosAppDataStream(request), expectedError);
            assert((client.innerApiCalls.deleteIosAppDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateIosAppDataStream', () => {
        it('invokes updateIosAppDataStream without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.UpdateIosAppDataStreamRequest());
            request.iosAppDataStream = {};
            request.iosAppDataStream.name = '';
            const expectedHeaderRequestParams = "ios_app_data_stream.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.IosAppDataStream());
            client.innerApiCalls.updateIosAppDataStream = stubSimpleCall(expectedResponse);
            const [response] = await client.updateIosAppDataStream(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateIosAppDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateIosAppDataStream without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.UpdateIosAppDataStreamRequest());
            request.iosAppDataStream = {};
            request.iosAppDataStream.name = '';
            const expectedHeaderRequestParams = "ios_app_data_stream.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.IosAppDataStream());
            client.innerApiCalls.updateIosAppDataStream = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateIosAppDataStream(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IIosAppDataStream|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateIosAppDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateIosAppDataStream with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.UpdateIosAppDataStreamRequest());
            request.iosAppDataStream = {};
            request.iosAppDataStream.name = '';
            const expectedHeaderRequestParams = "ios_app_data_stream.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateIosAppDataStream = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateIosAppDataStream(request), expectedError);
            assert((client.innerApiCalls.updateIosAppDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createIosAppDataStream', () => {
        it('invokes createIosAppDataStream without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.CreateIosAppDataStreamRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.IosAppDataStream());
            client.innerApiCalls.createIosAppDataStream = stubSimpleCall(expectedResponse);
            const [response] = await client.createIosAppDataStream(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createIosAppDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createIosAppDataStream without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.CreateIosAppDataStreamRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.IosAppDataStream());
            client.innerApiCalls.createIosAppDataStream = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createIosAppDataStream(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IIosAppDataStream|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createIosAppDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createIosAppDataStream with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.CreateIosAppDataStreamRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createIosAppDataStream = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createIosAppDataStream(request), expectedError);
            assert((client.innerApiCalls.createIosAppDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getAndroidAppDataStream', () => {
        it('invokes getAndroidAppDataStream without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.GetAndroidAppDataStreamRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.AndroidAppDataStream());
            client.innerApiCalls.getAndroidAppDataStream = stubSimpleCall(expectedResponse);
            const [response] = await client.getAndroidAppDataStream(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getAndroidAppDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getAndroidAppDataStream without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.GetAndroidAppDataStreamRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.AndroidAppDataStream());
            client.innerApiCalls.getAndroidAppDataStream = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getAndroidAppDataStream(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IAndroidAppDataStream|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getAndroidAppDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getAndroidAppDataStream with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.GetAndroidAppDataStreamRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getAndroidAppDataStream = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getAndroidAppDataStream(request), expectedError);
            assert((client.innerApiCalls.getAndroidAppDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteAndroidAppDataStream', () => {
        it('invokes deleteAndroidAppDataStream without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.DeleteAndroidAppDataStreamRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteAndroidAppDataStream = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteAndroidAppDataStream(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteAndroidAppDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteAndroidAppDataStream without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.DeleteAndroidAppDataStreamRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteAndroidAppDataStream = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteAndroidAppDataStream(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteAndroidAppDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteAndroidAppDataStream with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.DeleteAndroidAppDataStreamRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteAndroidAppDataStream = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteAndroidAppDataStream(request), expectedError);
            assert((client.innerApiCalls.deleteAndroidAppDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateAndroidAppDataStream', () => {
        it('invokes updateAndroidAppDataStream without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.UpdateAndroidAppDataStreamRequest());
            request.androidAppDataStream = {};
            request.androidAppDataStream.name = '';
            const expectedHeaderRequestParams = "android_app_data_stream.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.AndroidAppDataStream());
            client.innerApiCalls.updateAndroidAppDataStream = stubSimpleCall(expectedResponse);
            const [response] = await client.updateAndroidAppDataStream(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateAndroidAppDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateAndroidAppDataStream without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.UpdateAndroidAppDataStreamRequest());
            request.androidAppDataStream = {};
            request.androidAppDataStream.name = '';
            const expectedHeaderRequestParams = "android_app_data_stream.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.AndroidAppDataStream());
            client.innerApiCalls.updateAndroidAppDataStream = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateAndroidAppDataStream(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IAndroidAppDataStream|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateAndroidAppDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateAndroidAppDataStream with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.UpdateAndroidAppDataStreamRequest());
            request.androidAppDataStream = {};
            request.androidAppDataStream.name = '';
            const expectedHeaderRequestParams = "android_app_data_stream.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateAndroidAppDataStream = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateAndroidAppDataStream(request), expectedError);
            assert((client.innerApiCalls.updateAndroidAppDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createAndroidAppDataStream', () => {
        it('invokes createAndroidAppDataStream without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.CreateAndroidAppDataStreamRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.AndroidAppDataStream());
            client.innerApiCalls.createAndroidAppDataStream = stubSimpleCall(expectedResponse);
            const [response] = await client.createAndroidAppDataStream(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createAndroidAppDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createAndroidAppDataStream without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.CreateAndroidAppDataStreamRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.AndroidAppDataStream());
            client.innerApiCalls.createAndroidAppDataStream = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createAndroidAppDataStream(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IAndroidAppDataStream|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createAndroidAppDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createAndroidAppDataStream with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.CreateAndroidAppDataStreamRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createAndroidAppDataStream = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createAndroidAppDataStream(request), expectedError);
            assert((client.innerApiCalls.createAndroidAppDataStream as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getEnhancedMeasurementSettings', () => {
        it('invokes getEnhancedMeasurementSettings without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.GetEnhancedMeasurementSettingsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.EnhancedMeasurementSettings());
            client.innerApiCalls.getEnhancedMeasurementSettings = stubSimpleCall(expectedResponse);
            const [response] = await client.getEnhancedMeasurementSettings(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getEnhancedMeasurementSettings as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getEnhancedMeasurementSettings without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.GetEnhancedMeasurementSettingsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.EnhancedMeasurementSettings());
            client.innerApiCalls.getEnhancedMeasurementSettings = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getEnhancedMeasurementSettings(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IEnhancedMeasurementSettings|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getEnhancedMeasurementSettings as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getEnhancedMeasurementSettings with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.GetEnhancedMeasurementSettingsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getEnhancedMeasurementSettings = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getEnhancedMeasurementSettings(request), expectedError);
            assert((client.innerApiCalls.getEnhancedMeasurementSettings as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateEnhancedMeasurementSettings', () => {
        it('invokes updateEnhancedMeasurementSettings without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.UpdateEnhancedMeasurementSettingsRequest());
            request.enhancedMeasurementSettings = {};
            request.enhancedMeasurementSettings.name = '';
            const expectedHeaderRequestParams = "enhanced_measurement_settings.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.EnhancedMeasurementSettings());
            client.innerApiCalls.updateEnhancedMeasurementSettings = stubSimpleCall(expectedResponse);
            const [response] = await client.updateEnhancedMeasurementSettings(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateEnhancedMeasurementSettings as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateEnhancedMeasurementSettings without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.UpdateEnhancedMeasurementSettingsRequest());
            request.enhancedMeasurementSettings = {};
            request.enhancedMeasurementSettings.name = '';
            const expectedHeaderRequestParams = "enhanced_measurement_settings.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.EnhancedMeasurementSettings());
            client.innerApiCalls.updateEnhancedMeasurementSettings = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateEnhancedMeasurementSettings(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IEnhancedMeasurementSettings|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateEnhancedMeasurementSettings as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateEnhancedMeasurementSettings with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.UpdateEnhancedMeasurementSettingsRequest());
            request.enhancedMeasurementSettings = {};
            request.enhancedMeasurementSettings.name = '';
            const expectedHeaderRequestParams = "enhanced_measurement_settings.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateEnhancedMeasurementSettings = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateEnhancedMeasurementSettings(request), expectedError);
            assert((client.innerApiCalls.updateEnhancedMeasurementSettings as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createFirebaseLink', () => {
        it('invokes createFirebaseLink without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.CreateFirebaseLinkRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.FirebaseLink());
            client.innerApiCalls.createFirebaseLink = stubSimpleCall(expectedResponse);
            const [response] = await client.createFirebaseLink(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createFirebaseLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createFirebaseLink without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.CreateFirebaseLinkRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.FirebaseLink());
            client.innerApiCalls.createFirebaseLink = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createFirebaseLink(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IFirebaseLink|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createFirebaseLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createFirebaseLink with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.CreateFirebaseLinkRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createFirebaseLink = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createFirebaseLink(request), expectedError);
            assert((client.innerApiCalls.createFirebaseLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateFirebaseLink', () => {
        it('invokes updateFirebaseLink without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.UpdateFirebaseLinkRequest());
            request.firebaseLink = {};
            request.firebaseLink.name = '';
            const expectedHeaderRequestParams = "firebase_link.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.FirebaseLink());
            client.innerApiCalls.updateFirebaseLink = stubSimpleCall(expectedResponse);
            const [response] = await client.updateFirebaseLink(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateFirebaseLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateFirebaseLink without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.UpdateFirebaseLinkRequest());
            request.firebaseLink = {};
            request.firebaseLink.name = '';
            const expectedHeaderRequestParams = "firebase_link.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.FirebaseLink());
            client.innerApiCalls.updateFirebaseLink = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateFirebaseLink(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IFirebaseLink|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateFirebaseLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateFirebaseLink with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.UpdateFirebaseLinkRequest());
            request.firebaseLink = {};
            request.firebaseLink.name = '';
            const expectedHeaderRequestParams = "firebase_link.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateFirebaseLink = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateFirebaseLink(request), expectedError);
            assert((client.innerApiCalls.updateFirebaseLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteFirebaseLink', () => {
        it('invokes deleteFirebaseLink without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.DeleteFirebaseLinkRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteFirebaseLink = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteFirebaseLink(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteFirebaseLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteFirebaseLink without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.DeleteFirebaseLinkRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteFirebaseLink = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteFirebaseLink(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteFirebaseLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteFirebaseLink with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.DeleteFirebaseLinkRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteFirebaseLink = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteFirebaseLink(request), expectedError);
            assert((client.innerApiCalls.deleteFirebaseLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getGlobalSiteTag', () => {
        it('invokes getGlobalSiteTag without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.GetGlobalSiteTagRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.GlobalSiteTag());
            client.innerApiCalls.getGlobalSiteTag = stubSimpleCall(expectedResponse);
            const [response] = await client.getGlobalSiteTag(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getGlobalSiteTag as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getGlobalSiteTag without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.GetGlobalSiteTagRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.GlobalSiteTag());
            client.innerApiCalls.getGlobalSiteTag = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getGlobalSiteTag(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IGlobalSiteTag|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getGlobalSiteTag as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getGlobalSiteTag with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.GetGlobalSiteTagRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getGlobalSiteTag = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getGlobalSiteTag(request), expectedError);
            assert((client.innerApiCalls.getGlobalSiteTag as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('createGoogleAdsLink', () => {
        it('invokes createGoogleAdsLink without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.CreateGoogleAdsLinkRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.GoogleAdsLink());
            client.innerApiCalls.createGoogleAdsLink = stubSimpleCall(expectedResponse);
            const [response] = await client.createGoogleAdsLink(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createGoogleAdsLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes createGoogleAdsLink without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.CreateGoogleAdsLinkRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.GoogleAdsLink());
            client.innerApiCalls.createGoogleAdsLink = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.createGoogleAdsLink(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IGoogleAdsLink|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.createGoogleAdsLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes createGoogleAdsLink with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.CreateGoogleAdsLinkRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createGoogleAdsLink = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createGoogleAdsLink(request), expectedError);
            assert((client.innerApiCalls.createGoogleAdsLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('updateGoogleAdsLink', () => {
        it('invokes updateGoogleAdsLink without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.UpdateGoogleAdsLinkRequest());
            request.googleAdsLink = {};
            request.googleAdsLink.name = '';
            const expectedHeaderRequestParams = "google_ads_link.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.GoogleAdsLink());
            client.innerApiCalls.updateGoogleAdsLink = stubSimpleCall(expectedResponse);
            const [response] = await client.updateGoogleAdsLink(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateGoogleAdsLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes updateGoogleAdsLink without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.UpdateGoogleAdsLinkRequest());
            request.googleAdsLink = {};
            request.googleAdsLink.name = '';
            const expectedHeaderRequestParams = "google_ads_link.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.GoogleAdsLink());
            client.innerApiCalls.updateGoogleAdsLink = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.updateGoogleAdsLink(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IGoogleAdsLink|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.updateGoogleAdsLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes updateGoogleAdsLink with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.UpdateGoogleAdsLinkRequest());
            request.googleAdsLink = {};
            request.googleAdsLink.name = '';
            const expectedHeaderRequestParams = "google_ads_link.name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateGoogleAdsLink = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateGoogleAdsLink(request), expectedError);
            assert((client.innerApiCalls.updateGoogleAdsLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('deleteGoogleAdsLink', () => {
        it('invokes deleteGoogleAdsLink without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.DeleteGoogleAdsLinkRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteGoogleAdsLink = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteGoogleAdsLink(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteGoogleAdsLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes deleteGoogleAdsLink without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.DeleteGoogleAdsLinkRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteGoogleAdsLink = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.deleteGoogleAdsLink(
                    request,
                    (err?: Error|null, result?: protos.google.protobuf.IEmpty|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.deleteGoogleAdsLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes deleteGoogleAdsLink with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.DeleteGoogleAdsLinkRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteGoogleAdsLink = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteGoogleAdsLink(request), expectedError);
            assert((client.innerApiCalls.deleteGoogleAdsLink as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('getDataSharingSettings', () => {
        it('invokes getDataSharingSettings without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.GetDataSharingSettingsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.DataSharingSettings());
            client.innerApiCalls.getDataSharingSettings = stubSimpleCall(expectedResponse);
            const [response] = await client.getDataSharingSettings(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getDataSharingSettings as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes getDataSharingSettings without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.GetDataSharingSettingsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.analytics.admin.v1alpha.DataSharingSettings());
            client.innerApiCalls.getDataSharingSettings = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.getDataSharingSettings(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IDataSharingSettings|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.getDataSharingSettings as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes getDataSharingSettings with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.GetDataSharingSettingsRequest());
            request.name = '';
            const expectedHeaderRequestParams = "name=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getDataSharingSettings = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getDataSharingSettings(request), expectedError);
            assert((client.innerApiCalls.getDataSharingSettings as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });
    });

    describe('listAccounts', () => {
        it('invokes listAccounts without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListAccountsRequest());
            const expectedOptions = {};
            const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.Account()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.Account()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.Account()),
            ];
            client.innerApiCalls.listAccounts = stubSimpleCall(expectedResponse);
            const [response] = await client.listAccounts(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listAccounts as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listAccounts without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListAccountsRequest());
            const expectedOptions = {};
            const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.Account()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.Account()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.Account()),
            ];
            client.innerApiCalls.listAccounts = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listAccounts(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IAccount[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listAccounts as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listAccounts with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListAccountsRequest());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.listAccounts = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listAccounts(request), expectedError);
            assert((client.innerApiCalls.listAccounts as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listAccountsStream without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListAccountsRequest());
            const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.Account()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.Account()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.Account()),
            ];
            client.descriptors.page.listAccounts.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listAccountsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.analytics.admin.v1alpha.Account[] = [];
                stream.on('data', (response: protos.google.analytics.admin.v1alpha.Account) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listAccounts.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listAccounts, request));
        });

        it('invokes listAccountsStream with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListAccountsRequest());
            const expectedError = new Error('expected');
            client.descriptors.page.listAccounts.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listAccountsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.analytics.admin.v1alpha.Account[] = [];
                stream.on('data', (response: protos.google.analytics.admin.v1alpha.Account) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listAccounts.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listAccounts, request));
        });

        it('uses async iteration with listAccounts without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListAccountsRequest());const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.Account()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.Account()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.Account()),
            ];
            client.descriptors.page.listAccounts.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.analytics.admin.v1alpha.IAccount[] = [];
            const iterable = client.listAccountsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listAccounts.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });

        it('uses async iteration with listAccounts with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListAccountsRequest());const expectedError = new Error('expected');
            client.descriptors.page.listAccounts.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listAccountsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.analytics.admin.v1alpha.IAccount[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listAccounts.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
    });

    describe('listAccountSummaries', () => {
        it('invokes listAccountSummaries without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListAccountSummariesRequest());
            const expectedOptions = {};
            const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AccountSummary()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AccountSummary()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AccountSummary()),
            ];
            client.innerApiCalls.listAccountSummaries = stubSimpleCall(expectedResponse);
            const [response] = await client.listAccountSummaries(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listAccountSummaries as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listAccountSummaries without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListAccountSummariesRequest());
            const expectedOptions = {};
            const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AccountSummary()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AccountSummary()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AccountSummary()),
            ];
            client.innerApiCalls.listAccountSummaries = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listAccountSummaries(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IAccountSummary[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listAccountSummaries as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listAccountSummaries with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListAccountSummariesRequest());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.listAccountSummaries = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listAccountSummaries(request), expectedError);
            assert((client.innerApiCalls.listAccountSummaries as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listAccountSummariesStream without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListAccountSummariesRequest());
            const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AccountSummary()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AccountSummary()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AccountSummary()),
            ];
            client.descriptors.page.listAccountSummaries.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listAccountSummariesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.analytics.admin.v1alpha.AccountSummary[] = [];
                stream.on('data', (response: protos.google.analytics.admin.v1alpha.AccountSummary) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listAccountSummaries.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listAccountSummaries, request));
        });

        it('invokes listAccountSummariesStream with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListAccountSummariesRequest());
            const expectedError = new Error('expected');
            client.descriptors.page.listAccountSummaries.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listAccountSummariesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.analytics.admin.v1alpha.AccountSummary[] = [];
                stream.on('data', (response: protos.google.analytics.admin.v1alpha.AccountSummary) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listAccountSummaries.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listAccountSummaries, request));
        });

        it('uses async iteration with listAccountSummaries without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListAccountSummariesRequest());const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AccountSummary()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AccountSummary()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AccountSummary()),
            ];
            client.descriptors.page.listAccountSummaries.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.analytics.admin.v1alpha.IAccountSummary[] = [];
            const iterable = client.listAccountSummariesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listAccountSummaries.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });

        it('uses async iteration with listAccountSummaries with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListAccountSummariesRequest());const expectedError = new Error('expected');
            client.descriptors.page.listAccountSummaries.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listAccountSummariesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.analytics.admin.v1alpha.IAccountSummary[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listAccountSummaries.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
    });

    describe('listProperties', () => {
        it('invokes listProperties without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListPropertiesRequest());
            const expectedOptions = {};
            const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.Property()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.Property()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.Property()),
            ];
            client.innerApiCalls.listProperties = stubSimpleCall(expectedResponse);
            const [response] = await client.listProperties(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listProperties as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listProperties without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListPropertiesRequest());
            const expectedOptions = {};
            const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.Property()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.Property()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.Property()),
            ];
            client.innerApiCalls.listProperties = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listProperties(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IProperty[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listProperties as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listProperties with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListPropertiesRequest());
            const expectedOptions = {};
            const expectedError = new Error('expected');
            client.innerApiCalls.listProperties = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listProperties(request), expectedError);
            assert((client.innerApiCalls.listProperties as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listPropertiesStream without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListPropertiesRequest());
            const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.Property()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.Property()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.Property()),
            ];
            client.descriptors.page.listProperties.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listPropertiesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.analytics.admin.v1alpha.Property[] = [];
                stream.on('data', (response: protos.google.analytics.admin.v1alpha.Property) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listProperties.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listProperties, request));
        });

        it('invokes listPropertiesStream with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListPropertiesRequest());
            const expectedError = new Error('expected');
            client.descriptors.page.listProperties.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listPropertiesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.analytics.admin.v1alpha.Property[] = [];
                stream.on('data', (response: protos.google.analytics.admin.v1alpha.Property) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listProperties.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listProperties, request));
        });

        it('uses async iteration with listProperties without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListPropertiesRequest());const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.Property()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.Property()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.Property()),
            ];
            client.descriptors.page.listProperties.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.analytics.admin.v1alpha.IProperty[] = [];
            const iterable = client.listPropertiesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listProperties.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });

        it('uses async iteration with listProperties with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListPropertiesRequest());const expectedError = new Error('expected');
            client.descriptors.page.listProperties.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listPropertiesAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.analytics.admin.v1alpha.IProperty[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listProperties.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
        });
    });

    describe('listUserLinks', () => {
        it('invokes listUserLinks without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListUserLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.UserLink()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.UserLink()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.UserLink()),
            ];
            client.innerApiCalls.listUserLinks = stubSimpleCall(expectedResponse);
            const [response] = await client.listUserLinks(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listUserLinks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listUserLinks without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListUserLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.UserLink()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.UserLink()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.UserLink()),
            ];
            client.innerApiCalls.listUserLinks = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listUserLinks(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IUserLink[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listUserLinks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listUserLinks with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListUserLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listUserLinks = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listUserLinks(request), expectedError);
            assert((client.innerApiCalls.listUserLinks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listUserLinksStream without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListUserLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.UserLink()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.UserLink()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.UserLink()),
            ];
            client.descriptors.page.listUserLinks.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listUserLinksStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.analytics.admin.v1alpha.UserLink[] = [];
                stream.on('data', (response: protos.google.analytics.admin.v1alpha.UserLink) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listUserLinks.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listUserLinks, request));
            assert.strictEqual(
                (client.descriptors.page.listUserLinks.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listUserLinksStream with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListUserLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listUserLinks.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listUserLinksStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.analytics.admin.v1alpha.UserLink[] = [];
                stream.on('data', (response: protos.google.analytics.admin.v1alpha.UserLink) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listUserLinks.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listUserLinks, request));
            assert.strictEqual(
                (client.descriptors.page.listUserLinks.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listUserLinks without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListUserLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.UserLink()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.UserLink()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.UserLink()),
            ];
            client.descriptors.page.listUserLinks.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.analytics.admin.v1alpha.IUserLink[] = [];
            const iterable = client.listUserLinksAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listUserLinks.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listUserLinks.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listUserLinks with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListUserLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listUserLinks.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listUserLinksAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.analytics.admin.v1alpha.IUserLink[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listUserLinks.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listUserLinks.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('auditUserLinks', () => {
        it('invokes auditUserLinks without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.AuditUserLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AuditUserLink()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AuditUserLink()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AuditUserLink()),
            ];
            client.innerApiCalls.auditUserLinks = stubSimpleCall(expectedResponse);
            const [response] = await client.auditUserLinks(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.auditUserLinks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes auditUserLinks without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.AuditUserLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AuditUserLink()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AuditUserLink()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AuditUserLink()),
            ];
            client.innerApiCalls.auditUserLinks = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.auditUserLinks(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IAuditUserLink[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.auditUserLinks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes auditUserLinks with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.AuditUserLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.auditUserLinks = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.auditUserLinks(request), expectedError);
            assert((client.innerApiCalls.auditUserLinks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes auditUserLinksStream without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.AuditUserLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AuditUserLink()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AuditUserLink()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AuditUserLink()),
            ];
            client.descriptors.page.auditUserLinks.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.auditUserLinksStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.analytics.admin.v1alpha.AuditUserLink[] = [];
                stream.on('data', (response: protos.google.analytics.admin.v1alpha.AuditUserLink) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.auditUserLinks.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.auditUserLinks, request));
            assert.strictEqual(
                (client.descriptors.page.auditUserLinks.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes auditUserLinksStream with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.AuditUserLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.auditUserLinks.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.auditUserLinksStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.analytics.admin.v1alpha.AuditUserLink[] = [];
                stream.on('data', (response: protos.google.analytics.admin.v1alpha.AuditUserLink) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.auditUserLinks.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.auditUserLinks, request));
            assert.strictEqual(
                (client.descriptors.page.auditUserLinks.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with auditUserLinks without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.AuditUserLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AuditUserLink()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AuditUserLink()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AuditUserLink()),
            ];
            client.descriptors.page.auditUserLinks.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.analytics.admin.v1alpha.IAuditUserLink[] = [];
            const iterable = client.auditUserLinksAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.auditUserLinks.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.auditUserLinks.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with auditUserLinks with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.AuditUserLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.auditUserLinks.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.auditUserLinksAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.analytics.admin.v1alpha.IAuditUserLink[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.auditUserLinks.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.auditUserLinks.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listWebDataStreams', () => {
        it('invokes listWebDataStreams without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListWebDataStreamsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.WebDataStream()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.WebDataStream()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.WebDataStream()),
            ];
            client.innerApiCalls.listWebDataStreams = stubSimpleCall(expectedResponse);
            const [response] = await client.listWebDataStreams(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listWebDataStreams as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listWebDataStreams without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListWebDataStreamsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.WebDataStream()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.WebDataStream()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.WebDataStream()),
            ];
            client.innerApiCalls.listWebDataStreams = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listWebDataStreams(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IWebDataStream[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listWebDataStreams as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listWebDataStreams with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListWebDataStreamsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listWebDataStreams = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listWebDataStreams(request), expectedError);
            assert((client.innerApiCalls.listWebDataStreams as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listWebDataStreamsStream without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListWebDataStreamsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.WebDataStream()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.WebDataStream()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.WebDataStream()),
            ];
            client.descriptors.page.listWebDataStreams.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listWebDataStreamsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.analytics.admin.v1alpha.WebDataStream[] = [];
                stream.on('data', (response: protos.google.analytics.admin.v1alpha.WebDataStream) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listWebDataStreams.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listWebDataStreams, request));
            assert.strictEqual(
                (client.descriptors.page.listWebDataStreams.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listWebDataStreamsStream with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListWebDataStreamsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listWebDataStreams.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listWebDataStreamsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.analytics.admin.v1alpha.WebDataStream[] = [];
                stream.on('data', (response: protos.google.analytics.admin.v1alpha.WebDataStream) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listWebDataStreams.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listWebDataStreams, request));
            assert.strictEqual(
                (client.descriptors.page.listWebDataStreams.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listWebDataStreams without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListWebDataStreamsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.WebDataStream()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.WebDataStream()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.WebDataStream()),
            ];
            client.descriptors.page.listWebDataStreams.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.analytics.admin.v1alpha.IWebDataStream[] = [];
            const iterable = client.listWebDataStreamsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listWebDataStreams.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listWebDataStreams.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listWebDataStreams with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListWebDataStreamsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listWebDataStreams.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listWebDataStreamsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.analytics.admin.v1alpha.IWebDataStream[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listWebDataStreams.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listWebDataStreams.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listIosAppDataStreams', () => {
        it('invokes listIosAppDataStreams without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListIosAppDataStreamsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.IosAppDataStream()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.IosAppDataStream()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.IosAppDataStream()),
            ];
            client.innerApiCalls.listIosAppDataStreams = stubSimpleCall(expectedResponse);
            const [response] = await client.listIosAppDataStreams(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listIosAppDataStreams as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listIosAppDataStreams without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListIosAppDataStreamsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.IosAppDataStream()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.IosAppDataStream()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.IosAppDataStream()),
            ];
            client.innerApiCalls.listIosAppDataStreams = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listIosAppDataStreams(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IIosAppDataStream[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listIosAppDataStreams as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listIosAppDataStreams with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListIosAppDataStreamsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listIosAppDataStreams = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listIosAppDataStreams(request), expectedError);
            assert((client.innerApiCalls.listIosAppDataStreams as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listIosAppDataStreamsStream without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListIosAppDataStreamsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.IosAppDataStream()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.IosAppDataStream()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.IosAppDataStream()),
            ];
            client.descriptors.page.listIosAppDataStreams.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listIosAppDataStreamsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.analytics.admin.v1alpha.IosAppDataStream[] = [];
                stream.on('data', (response: protos.google.analytics.admin.v1alpha.IosAppDataStream) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listIosAppDataStreams.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listIosAppDataStreams, request));
            assert.strictEqual(
                (client.descriptors.page.listIosAppDataStreams.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listIosAppDataStreamsStream with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListIosAppDataStreamsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listIosAppDataStreams.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listIosAppDataStreamsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.analytics.admin.v1alpha.IosAppDataStream[] = [];
                stream.on('data', (response: protos.google.analytics.admin.v1alpha.IosAppDataStream) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listIosAppDataStreams.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listIosAppDataStreams, request));
            assert.strictEqual(
                (client.descriptors.page.listIosAppDataStreams.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listIosAppDataStreams without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListIosAppDataStreamsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.IosAppDataStream()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.IosAppDataStream()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.IosAppDataStream()),
            ];
            client.descriptors.page.listIosAppDataStreams.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.analytics.admin.v1alpha.IIosAppDataStream[] = [];
            const iterable = client.listIosAppDataStreamsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listIosAppDataStreams.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listIosAppDataStreams.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listIosAppDataStreams with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListIosAppDataStreamsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listIosAppDataStreams.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listIosAppDataStreamsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.analytics.admin.v1alpha.IIosAppDataStream[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listIosAppDataStreams.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listIosAppDataStreams.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listAndroidAppDataStreams', () => {
        it('invokes listAndroidAppDataStreams without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListAndroidAppDataStreamsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AndroidAppDataStream()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AndroidAppDataStream()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AndroidAppDataStream()),
            ];
            client.innerApiCalls.listAndroidAppDataStreams = stubSimpleCall(expectedResponse);
            const [response] = await client.listAndroidAppDataStreams(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listAndroidAppDataStreams as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listAndroidAppDataStreams without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListAndroidAppDataStreamsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AndroidAppDataStream()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AndroidAppDataStream()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AndroidAppDataStream()),
            ];
            client.innerApiCalls.listAndroidAppDataStreams = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listAndroidAppDataStreams(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IAndroidAppDataStream[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listAndroidAppDataStreams as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listAndroidAppDataStreams with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListAndroidAppDataStreamsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listAndroidAppDataStreams = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listAndroidAppDataStreams(request), expectedError);
            assert((client.innerApiCalls.listAndroidAppDataStreams as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listAndroidAppDataStreamsStream without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListAndroidAppDataStreamsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AndroidAppDataStream()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AndroidAppDataStream()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AndroidAppDataStream()),
            ];
            client.descriptors.page.listAndroidAppDataStreams.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listAndroidAppDataStreamsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.analytics.admin.v1alpha.AndroidAppDataStream[] = [];
                stream.on('data', (response: protos.google.analytics.admin.v1alpha.AndroidAppDataStream) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listAndroidAppDataStreams.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listAndroidAppDataStreams, request));
            assert.strictEqual(
                (client.descriptors.page.listAndroidAppDataStreams.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listAndroidAppDataStreamsStream with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListAndroidAppDataStreamsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listAndroidAppDataStreams.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listAndroidAppDataStreamsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.analytics.admin.v1alpha.AndroidAppDataStream[] = [];
                stream.on('data', (response: protos.google.analytics.admin.v1alpha.AndroidAppDataStream) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listAndroidAppDataStreams.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listAndroidAppDataStreams, request));
            assert.strictEqual(
                (client.descriptors.page.listAndroidAppDataStreams.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listAndroidAppDataStreams without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListAndroidAppDataStreamsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AndroidAppDataStream()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AndroidAppDataStream()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.AndroidAppDataStream()),
            ];
            client.descriptors.page.listAndroidAppDataStreams.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.analytics.admin.v1alpha.IAndroidAppDataStream[] = [];
            const iterable = client.listAndroidAppDataStreamsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listAndroidAppDataStreams.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listAndroidAppDataStreams.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listAndroidAppDataStreams with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListAndroidAppDataStreamsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listAndroidAppDataStreams.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listAndroidAppDataStreamsAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.analytics.admin.v1alpha.IAndroidAppDataStream[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listAndroidAppDataStreams.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listAndroidAppDataStreams.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listFirebaseLinks', () => {
        it('invokes listFirebaseLinks without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListFirebaseLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.FirebaseLink()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.FirebaseLink()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.FirebaseLink()),
            ];
            client.innerApiCalls.listFirebaseLinks = stubSimpleCall(expectedResponse);
            const [response] = await client.listFirebaseLinks(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listFirebaseLinks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listFirebaseLinks without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListFirebaseLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.FirebaseLink()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.FirebaseLink()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.FirebaseLink()),
            ];
            client.innerApiCalls.listFirebaseLinks = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listFirebaseLinks(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IFirebaseLink[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listFirebaseLinks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listFirebaseLinks with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListFirebaseLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listFirebaseLinks = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listFirebaseLinks(request), expectedError);
            assert((client.innerApiCalls.listFirebaseLinks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listFirebaseLinksStream without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListFirebaseLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.FirebaseLink()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.FirebaseLink()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.FirebaseLink()),
            ];
            client.descriptors.page.listFirebaseLinks.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listFirebaseLinksStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.analytics.admin.v1alpha.FirebaseLink[] = [];
                stream.on('data', (response: protos.google.analytics.admin.v1alpha.FirebaseLink) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listFirebaseLinks.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listFirebaseLinks, request));
            assert.strictEqual(
                (client.descriptors.page.listFirebaseLinks.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listFirebaseLinksStream with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListFirebaseLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listFirebaseLinks.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listFirebaseLinksStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.analytics.admin.v1alpha.FirebaseLink[] = [];
                stream.on('data', (response: protos.google.analytics.admin.v1alpha.FirebaseLink) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listFirebaseLinks.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listFirebaseLinks, request));
            assert.strictEqual(
                (client.descriptors.page.listFirebaseLinks.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listFirebaseLinks without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListFirebaseLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.FirebaseLink()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.FirebaseLink()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.FirebaseLink()),
            ];
            client.descriptors.page.listFirebaseLinks.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.analytics.admin.v1alpha.IFirebaseLink[] = [];
            const iterable = client.listFirebaseLinksAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listFirebaseLinks.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listFirebaseLinks.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listFirebaseLinks with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListFirebaseLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listFirebaseLinks.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listFirebaseLinksAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.analytics.admin.v1alpha.IFirebaseLink[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listFirebaseLinks.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listFirebaseLinks.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('listGoogleAdsLinks', () => {
        it('invokes listGoogleAdsLinks without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListGoogleAdsLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.GoogleAdsLink()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.GoogleAdsLink()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.GoogleAdsLink()),
            ];
            client.innerApiCalls.listGoogleAdsLinks = stubSimpleCall(expectedResponse);
            const [response] = await client.listGoogleAdsLinks(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listGoogleAdsLinks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listGoogleAdsLinks without error using callback', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListGoogleAdsLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.GoogleAdsLink()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.GoogleAdsLink()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.GoogleAdsLink()),
            ];
            client.innerApiCalls.listGoogleAdsLinks = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                 client.listGoogleAdsLinks(
                    request,
                    (err?: Error|null, result?: protos.google.analytics.admin.v1alpha.IGoogleAdsLink[]|null) => {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(result);
                        }
                    });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert((client.innerApiCalls.listGoogleAdsLinks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions /*, callback defined above */));
        });

        it('invokes listGoogleAdsLinks with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListGoogleAdsLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listGoogleAdsLinks = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listGoogleAdsLinks(request), expectedError);
            assert((client.innerApiCalls.listGoogleAdsLinks as SinonStub)
                .getCall(0).calledWith(request, expectedOptions, undefined));
        });

        it('invokes listGoogleAdsLinksStream without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListGoogleAdsLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.GoogleAdsLink()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.GoogleAdsLink()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.GoogleAdsLink()),
            ];
            client.descriptors.page.listGoogleAdsLinks.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listGoogleAdsLinksStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.analytics.admin.v1alpha.GoogleAdsLink[] = [];
                stream.on('data', (response: protos.google.analytics.admin.v1alpha.GoogleAdsLink) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert((client.descriptors.page.listGoogleAdsLinks.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listGoogleAdsLinks, request));
            assert.strictEqual(
                (client.descriptors.page.listGoogleAdsLinks.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('invokes listGoogleAdsLinksStream with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListGoogleAdsLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";
            const expectedError = new Error('expected');
            client.descriptors.page.listGoogleAdsLinks.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listGoogleAdsLinksStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses: protos.google.analytics.admin.v1alpha.GoogleAdsLink[] = [];
                stream.on('data', (response: protos.google.analytics.admin.v1alpha.GoogleAdsLink) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err: Error) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert((client.descriptors.page.listGoogleAdsLinks.createStream as SinonStub)
                .getCall(0).calledWith(client.innerApiCalls.listGoogleAdsLinks, request));
            assert.strictEqual(
                (client.descriptors.page.listGoogleAdsLinks.createStream as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listGoogleAdsLinks without error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListGoogleAdsLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedResponse = [
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.GoogleAdsLink()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.GoogleAdsLink()),
              generateSampleMessage(new protos.google.analytics.admin.v1alpha.GoogleAdsLink()),
            ];
            client.descriptors.page.listGoogleAdsLinks.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses: protos.google.analytics.admin.v1alpha.IGoogleAdsLink[] = [];
            const iterable = client.listGoogleAdsLinksAsync(request);
            for await (const resource of iterable) {
                responses.push(resource!);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(
                (client.descriptors.page.listGoogleAdsLinks.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listGoogleAdsLinks.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });

        it('uses async iteration with listGoogleAdsLinks with error', async () => {
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.analytics.admin.v1alpha.ListGoogleAdsLinksRequest());
            request.parent = '';
            const expectedHeaderRequestParams = "parent=";const expectedError = new Error('expected');
            client.descriptors.page.listGoogleAdsLinks.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listGoogleAdsLinksAsync(request);
            await assert.rejects(async () => {
                const responses: protos.google.analytics.admin.v1alpha.IGoogleAdsLink[] = [];
                for await (const resource of iterable) {
                    responses.push(resource!);
                }
            });
            assert.deepStrictEqual(
                (client.descriptors.page.listGoogleAdsLinks.asyncIterate as SinonStub)
                    .getCall(0).args[1], request);
            assert.strictEqual(
                (client.descriptors.page.listGoogleAdsLinks.asyncIterate as SinonStub)
                    .getCall(0).args[2].otherArgs.headers['x-goog-request-params'],
                expectedHeaderRequestParams
            );
        });
    });

    describe('Path templates', () => {

        describe('account', () => {
            const fakePath = "/rendered/path/account";
            const expectedParameters = {
                account: "accountValue",
            };
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.accountPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.accountPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('accountPath', () => {
                const result = client.accountPath("accountValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.accountPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchAccountFromAccountName', () => {
                const result = client.matchAccountFromAccountName(fakePath);
                assert.strictEqual(result, "accountValue");
                assert((client.pathTemplates.accountPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('accountSummary', () => {
            const fakePath = "/rendered/path/accountSummary";
            const expectedParameters = {
                account_summary: "accountSummaryValue",
            };
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.accountSummaryPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.accountSummaryPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('accountSummaryPath', () => {
                const result = client.accountSummaryPath("accountSummaryValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.accountSummaryPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchAccountSummaryFromAccountSummaryName', () => {
                const result = client.matchAccountSummaryFromAccountSummaryName(fakePath);
                assert.strictEqual(result, "accountSummaryValue");
                assert((client.pathTemplates.accountSummaryPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('accountUserLink', () => {
            const fakePath = "/rendered/path/accountUserLink";
            const expectedParameters = {
                account: "accountValue",
                user_link: "userLinkValue",
            };
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.accountUserLinkPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.accountUserLinkPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('accountUserLinkPath', () => {
                const result = client.accountUserLinkPath("accountValue", "userLinkValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.accountUserLinkPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchAccountFromAccountUserLinkName', () => {
                const result = client.matchAccountFromAccountUserLinkName(fakePath);
                assert.strictEqual(result, "accountValue");
                assert((client.pathTemplates.accountUserLinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchUserLinkFromAccountUserLinkName', () => {
                const result = client.matchUserLinkFromAccountUserLinkName(fakePath);
                assert.strictEqual(result, "userLinkValue");
                assert((client.pathTemplates.accountUserLinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('androidAppDataStream', () => {
            const fakePath = "/rendered/path/androidAppDataStream";
            const expectedParameters = {
                property: "propertyValue",
                android_app_data_stream: "androidAppDataStreamValue",
            };
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.androidAppDataStreamPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.androidAppDataStreamPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('androidAppDataStreamPath', () => {
                const result = client.androidAppDataStreamPath("propertyValue", "androidAppDataStreamValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.androidAppDataStreamPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchPropertyFromAndroidAppDataStreamName', () => {
                const result = client.matchPropertyFromAndroidAppDataStreamName(fakePath);
                assert.strictEqual(result, "propertyValue");
                assert((client.pathTemplates.androidAppDataStreamPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchAndroidAppDataStreamFromAndroidAppDataStreamName', () => {
                const result = client.matchAndroidAppDataStreamFromAndroidAppDataStreamName(fakePath);
                assert.strictEqual(result, "androidAppDataStreamValue");
                assert((client.pathTemplates.androidAppDataStreamPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('dataSharingSettings', () => {
            const fakePath = "/rendered/path/dataSharingSettings";
            const expectedParameters = {
                account: "accountValue",
            };
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.dataSharingSettingsPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.dataSharingSettingsPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('dataSharingSettingsPath', () => {
                const result = client.dataSharingSettingsPath("accountValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.dataSharingSettingsPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchAccountFromDataSharingSettingsName', () => {
                const result = client.matchAccountFromDataSharingSettingsName(fakePath);
                assert.strictEqual(result, "accountValue");
                assert((client.pathTemplates.dataSharingSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('enhancedMeasurementSettings', () => {
            const fakePath = "/rendered/path/enhancedMeasurementSettings";
            const expectedParameters = {
                property: "propertyValue",
                web_data_stream: "webDataStreamValue",
            };
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.enhancedMeasurementSettingsPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.enhancedMeasurementSettingsPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('enhancedMeasurementSettingsPath', () => {
                const result = client.enhancedMeasurementSettingsPath("propertyValue", "webDataStreamValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.enhancedMeasurementSettingsPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchPropertyFromEnhancedMeasurementSettingsName', () => {
                const result = client.matchPropertyFromEnhancedMeasurementSettingsName(fakePath);
                assert.strictEqual(result, "propertyValue");
                assert((client.pathTemplates.enhancedMeasurementSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchWebDataStreamFromEnhancedMeasurementSettingsName', () => {
                const result = client.matchWebDataStreamFromEnhancedMeasurementSettingsName(fakePath);
                assert.strictEqual(result, "webDataStreamValue");
                assert((client.pathTemplates.enhancedMeasurementSettingsPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('firebaseLink', () => {
            const fakePath = "/rendered/path/firebaseLink";
            const expectedParameters = {
                property: "propertyValue",
                firebase_link: "firebaseLinkValue",
            };
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.firebaseLinkPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.firebaseLinkPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('firebaseLinkPath', () => {
                const result = client.firebaseLinkPath("propertyValue", "firebaseLinkValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.firebaseLinkPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchPropertyFromFirebaseLinkName', () => {
                const result = client.matchPropertyFromFirebaseLinkName(fakePath);
                assert.strictEqual(result, "propertyValue");
                assert((client.pathTemplates.firebaseLinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchFirebaseLinkFromFirebaseLinkName', () => {
                const result = client.matchFirebaseLinkFromFirebaseLinkName(fakePath);
                assert.strictEqual(result, "firebaseLinkValue");
                assert((client.pathTemplates.firebaseLinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('globalSiteTag', () => {
            const fakePath = "/rendered/path/globalSiteTag";
            const expectedParameters = {
                property: "propertyValue",
            };
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.globalSiteTagPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.globalSiteTagPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('globalSiteTagPath', () => {
                const result = client.globalSiteTagPath("propertyValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.globalSiteTagPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchPropertyFromGlobalSiteTagName', () => {
                const result = client.matchPropertyFromGlobalSiteTagName(fakePath);
                assert.strictEqual(result, "propertyValue");
                assert((client.pathTemplates.globalSiteTagPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('googleAdsLink', () => {
            const fakePath = "/rendered/path/googleAdsLink";
            const expectedParameters = {
                property: "propertyValue",
                google_ads_link: "googleAdsLinkValue",
            };
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.googleAdsLinkPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.googleAdsLinkPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('googleAdsLinkPath', () => {
                const result = client.googleAdsLinkPath("propertyValue", "googleAdsLinkValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.googleAdsLinkPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchPropertyFromGoogleAdsLinkName', () => {
                const result = client.matchPropertyFromGoogleAdsLinkName(fakePath);
                assert.strictEqual(result, "propertyValue");
                assert((client.pathTemplates.googleAdsLinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchGoogleAdsLinkFromGoogleAdsLinkName', () => {
                const result = client.matchGoogleAdsLinkFromGoogleAdsLinkName(fakePath);
                assert.strictEqual(result, "googleAdsLinkValue");
                assert((client.pathTemplates.googleAdsLinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('iosAppDataStream', () => {
            const fakePath = "/rendered/path/iosAppDataStream";
            const expectedParameters = {
                property: "propertyValue",
                ios_app_data_stream: "iosAppDataStreamValue",
            };
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.iosAppDataStreamPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.iosAppDataStreamPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('iosAppDataStreamPath', () => {
                const result = client.iosAppDataStreamPath("propertyValue", "iosAppDataStreamValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.iosAppDataStreamPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchPropertyFromIosAppDataStreamName', () => {
                const result = client.matchPropertyFromIosAppDataStreamName(fakePath);
                assert.strictEqual(result, "propertyValue");
                assert((client.pathTemplates.iosAppDataStreamPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchIosAppDataStreamFromIosAppDataStreamName', () => {
                const result = client.matchIosAppDataStreamFromIosAppDataStreamName(fakePath);
                assert.strictEqual(result, "iosAppDataStreamValue");
                assert((client.pathTemplates.iosAppDataStreamPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('property', () => {
            const fakePath = "/rendered/path/property";
            const expectedParameters = {
                property: "propertyValue",
            };
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.propertyPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.propertyPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('propertyPath', () => {
                const result = client.propertyPath("propertyValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.propertyPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchPropertyFromPropertyName', () => {
                const result = client.matchPropertyFromPropertyName(fakePath);
                assert.strictEqual(result, "propertyValue");
                assert((client.pathTemplates.propertyPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('propertyUserLink', () => {
            const fakePath = "/rendered/path/propertyUserLink";
            const expectedParameters = {
                property: "propertyValue",
                user_link: "userLinkValue",
            };
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.propertyUserLinkPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.propertyUserLinkPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('propertyUserLinkPath', () => {
                const result = client.propertyUserLinkPath("propertyValue", "userLinkValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.propertyUserLinkPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchPropertyFromPropertyUserLinkName', () => {
                const result = client.matchPropertyFromPropertyUserLinkName(fakePath);
                assert.strictEqual(result, "propertyValue");
                assert((client.pathTemplates.propertyUserLinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchUserLinkFromPropertyUserLinkName', () => {
                const result = client.matchUserLinkFromPropertyUserLinkName(fakePath);
                assert.strictEqual(result, "userLinkValue");
                assert((client.pathTemplates.propertyUserLinkPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });

        describe('webDataStream', () => {
            const fakePath = "/rendered/path/webDataStream";
            const expectedParameters = {
                property: "propertyValue",
                web_data_stream: "webDataStreamValue",
            };
            const client = new analyticsadminserviceModule.v1alpha.AnalyticsAdminServiceClient({
                credentials: {client_email: 'bogus', private_key: 'bogus'},
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.webDataStreamPathTemplate.render =
                sinon.stub().returns(fakePath);
            client.pathTemplates.webDataStreamPathTemplate.match =
                sinon.stub().returns(expectedParameters);

            it('webDataStreamPath', () => {
                const result = client.webDataStreamPath("propertyValue", "webDataStreamValue");
                assert.strictEqual(result, fakePath);
                assert((client.pathTemplates.webDataStreamPathTemplate.render as SinonStub)
                    .getCall(-1).calledWith(expectedParameters));
            });

            it('matchPropertyFromWebDataStreamName', () => {
                const result = client.matchPropertyFromWebDataStreamName(fakePath);
                assert.strictEqual(result, "propertyValue");
                assert((client.pathTemplates.webDataStreamPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });

            it('matchWebDataStreamFromWebDataStreamName', () => {
                const result = client.matchWebDataStreamFromWebDataStreamName(fakePath);
                assert.strictEqual(result, "webDataStreamValue");
                assert((client.pathTemplates.webDataStreamPathTemplate.match as SinonStub)
                    .getCall(-1).calledWith(fakePath));
            });
        });
    });
});
